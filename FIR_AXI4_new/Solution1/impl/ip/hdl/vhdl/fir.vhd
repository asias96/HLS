-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
generic (
    C_S_AXI_BUNDLE_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_BUNDLE_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_bundle_AWVALID : IN STD_LOGIC;
    s_axi_bundle_AWREADY : OUT STD_LOGIC;
    s_axi_bundle_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_bundle_WVALID : IN STD_LOGIC;
    s_axi_bundle_WREADY : OUT STD_LOGIC;
    s_axi_bundle_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_bundle_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUNDLE_DATA_WIDTH/8-1 downto 0);
    s_axi_bundle_ARVALID : IN STD_LOGIC;
    s_axi_bundle_ARREADY : OUT STD_LOGIC;
    s_axi_bundle_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_bundle_RVALID : OUT STD_LOGIC;
    s_axi_bundle_RREADY : IN STD_LOGIC;
    s_axi_bundle_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_bundle_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_bundle_BVALID : OUT STD_LOGIC;
    s_axi_bundle_BREADY : IN STD_LOGIC;
    s_axi_bundle_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    stream_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=604,HLS_SYN_TPT=605,HLS_SYN_MEM=0,HLS_SYN_DSP=30,HLS_SYN_FF=1881,HLS_SYN_LUT=2023,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal coeff_0_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_1_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_3_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_4_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_5_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_6_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_7_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_8_V : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_9_V : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_ap_start : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_ap_done : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_stream_in_TREADY : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TVALID : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal Loop_STREAM_LOOP_pro_U0_stream_out_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_start_full_n : STD_LOGIC;
    signal Loop_STREAM_LOOP_pro_U0_start_write : STD_LOGIC;

    component Loop_STREAM_LOOP_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        stream_in_TVALID : IN STD_LOGIC;
        stream_in_TREADY : OUT STD_LOGIC;
        stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        stream_in_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
        coeff_9_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_8_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_7_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_6_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_5_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_4_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_3_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_2_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_1_V : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_0_V : IN STD_LOGIC_VECTOR (31 downto 0);
        stream_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        stream_out_TVALID : OUT STD_LOGIC;
        stream_out_TREADY : IN STD_LOGIC;
        stream_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        stream_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        stream_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        stream_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        stream_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component fir_bundle_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        coeff_0_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_1_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_3_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_4_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_5_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_6_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_7_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_8_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_9_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fir_bundle_s_axi_U : component fir_bundle_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUNDLE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUNDLE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_bundle_AWVALID,
        AWREADY => s_axi_bundle_AWREADY,
        AWADDR => s_axi_bundle_AWADDR,
        WVALID => s_axi_bundle_WVALID,
        WREADY => s_axi_bundle_WREADY,
        WDATA => s_axi_bundle_WDATA,
        WSTRB => s_axi_bundle_WSTRB,
        ARVALID => s_axi_bundle_ARVALID,
        ARREADY => s_axi_bundle_ARREADY,
        ARADDR => s_axi_bundle_ARADDR,
        RVALID => s_axi_bundle_RVALID,
        RREADY => s_axi_bundle_RREADY,
        RDATA => s_axi_bundle_RDATA,
        RRESP => s_axi_bundle_RRESP,
        BVALID => s_axi_bundle_BVALID,
        BREADY => s_axi_bundle_BREADY,
        BRESP => s_axi_bundle_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        coeff_0_V => coeff_0_V,
        coeff_1_V => coeff_1_V,
        coeff_2_V => coeff_2_V,
        coeff_3_V => coeff_3_V,
        coeff_4_V => coeff_4_V,
        coeff_5_V => coeff_5_V,
        coeff_6_V => coeff_6_V,
        coeff_7_V => coeff_7_V,
        coeff_8_V => coeff_8_V,
        coeff_9_V => coeff_9_V);

    Loop_STREAM_LOOP_pro_U0 : component Loop_STREAM_LOOP_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_STREAM_LOOP_pro_U0_ap_start,
        ap_done => Loop_STREAM_LOOP_pro_U0_ap_done,
        ap_continue => Loop_STREAM_LOOP_pro_U0_ap_continue,
        ap_idle => Loop_STREAM_LOOP_pro_U0_ap_idle,
        ap_ready => Loop_STREAM_LOOP_pro_U0_ap_ready,
        stream_in_TDATA => stream_in_TDATA,
        stream_in_TVALID => stream_in_TVALID,
        stream_in_TREADY => Loop_STREAM_LOOP_pro_U0_stream_in_TREADY,
        stream_in_TKEEP => stream_in_TKEEP,
        stream_in_TSTRB => stream_in_TSTRB,
        stream_in_TUSER => stream_in_TUSER,
        stream_in_TLAST => stream_in_TLAST,
        stream_in_TID => stream_in_TID,
        stream_in_TDEST => stream_in_TDEST,
        coeff_9_V => coeff_9_V,
        coeff_8_V => coeff_8_V,
        coeff_7_V => coeff_7_V,
        coeff_6_V => coeff_6_V,
        coeff_5_V => coeff_5_V,
        coeff_4_V => coeff_4_V,
        coeff_3_V => coeff_3_V,
        coeff_2_V => coeff_2_V,
        coeff_1_V => coeff_1_V,
        coeff_0_V => coeff_0_V,
        stream_out_TDATA => Loop_STREAM_LOOP_pro_U0_stream_out_TDATA,
        stream_out_TVALID => Loop_STREAM_LOOP_pro_U0_stream_out_TVALID,
        stream_out_TREADY => stream_out_TREADY,
        stream_out_TKEEP => Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP,
        stream_out_TSTRB => Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB,
        stream_out_TUSER => Loop_STREAM_LOOP_pro_U0_stream_out_TUSER,
        stream_out_TLAST => Loop_STREAM_LOOP_pro_U0_stream_out_TLAST,
        stream_out_TID => Loop_STREAM_LOOP_pro_U0_stream_out_TID,
        stream_out_TDEST => Loop_STREAM_LOOP_pro_U0_stream_out_TDEST);




    Loop_STREAM_LOOP_pro_U0_ap_continue <= ap_const_logic_1;
    Loop_STREAM_LOOP_pro_U0_ap_start <= ap_start;
    Loop_STREAM_LOOP_pro_U0_start_full_n <= ap_const_logic_1;
    Loop_STREAM_LOOP_pro_U0_start_write <= ap_const_logic_0;
    ap_done <= Loop_STREAM_LOOP_pro_U0_ap_done;
    ap_idle <= Loop_STREAM_LOOP_pro_U0_ap_idle;
    ap_ready <= Loop_STREAM_LOOP_pro_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_STREAM_LOOP_pro_U0_ap_done;
    ap_sync_ready <= Loop_STREAM_LOOP_pro_U0_ap_ready;
    stream_in_TREADY <= Loop_STREAM_LOOP_pro_U0_stream_in_TREADY;
    stream_out_TDATA <= Loop_STREAM_LOOP_pro_U0_stream_out_TDATA;
    stream_out_TDEST <= Loop_STREAM_LOOP_pro_U0_stream_out_TDEST;
    stream_out_TID <= Loop_STREAM_LOOP_pro_U0_stream_out_TID;
    stream_out_TKEEP <= Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP;
    stream_out_TLAST <= Loop_STREAM_LOOP_pro_U0_stream_out_TLAST;
    stream_out_TSTRB <= Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB;
    stream_out_TUSER <= Loop_STREAM_LOOP_pro_U0_stream_out_TUSER;
    stream_out_TVALID <= Loop_STREAM_LOOP_pro_U0_stream_out_TVALID;
end behav;
