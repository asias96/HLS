// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int fir::C_S_AXI_DATA_WIDTH = "100000";
const int fir::C_S_AXI_WSTRB_WIDTH = "100";
const int fir::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> fir::ap_const_lv4_0 = "0000";
const sc_lv<2> fir::ap_const_lv2_0 = "00";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<5> fir::ap_const_lv5_0 = "00000";
const sc_lv<6> fir::ap_const_lv6_0 = "000000";
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fir_bundle_s_axi_U = new fir_bundle_s_axi<C_S_AXI_BUNDLE_ADDR_WIDTH,C_S_AXI_BUNDLE_DATA_WIDTH>("fir_bundle_s_axi_U");
    fir_bundle_s_axi_U->AWVALID(s_axi_bundle_AWVALID);
    fir_bundle_s_axi_U->AWREADY(s_axi_bundle_AWREADY);
    fir_bundle_s_axi_U->AWADDR(s_axi_bundle_AWADDR);
    fir_bundle_s_axi_U->WVALID(s_axi_bundle_WVALID);
    fir_bundle_s_axi_U->WREADY(s_axi_bundle_WREADY);
    fir_bundle_s_axi_U->WDATA(s_axi_bundle_WDATA);
    fir_bundle_s_axi_U->WSTRB(s_axi_bundle_WSTRB);
    fir_bundle_s_axi_U->ARVALID(s_axi_bundle_ARVALID);
    fir_bundle_s_axi_U->ARREADY(s_axi_bundle_ARREADY);
    fir_bundle_s_axi_U->ARADDR(s_axi_bundle_ARADDR);
    fir_bundle_s_axi_U->RVALID(s_axi_bundle_RVALID);
    fir_bundle_s_axi_U->RREADY(s_axi_bundle_RREADY);
    fir_bundle_s_axi_U->RDATA(s_axi_bundle_RDATA);
    fir_bundle_s_axi_U->RRESP(s_axi_bundle_RRESP);
    fir_bundle_s_axi_U->BVALID(s_axi_bundle_BVALID);
    fir_bundle_s_axi_U->BREADY(s_axi_bundle_BREADY);
    fir_bundle_s_axi_U->BRESP(s_axi_bundle_BRESP);
    fir_bundle_s_axi_U->ACLK(ap_clk);
    fir_bundle_s_axi_U->ARESET(ap_rst_n_inv);
    fir_bundle_s_axi_U->ACLK_EN(ap_var_for_const0);
    fir_bundle_s_axi_U->ap_start(ap_start);
    fir_bundle_s_axi_U->interrupt(interrupt);
    fir_bundle_s_axi_U->ap_ready(ap_ready);
    fir_bundle_s_axi_U->ap_done(ap_done);
    fir_bundle_s_axi_U->ap_idle(ap_idle);
    fir_bundle_s_axi_U->coeff_0_V(coeff_0_V);
    fir_bundle_s_axi_U->coeff_1_V(coeff_1_V);
    fir_bundle_s_axi_U->coeff_2_V(coeff_2_V);
    fir_bundle_s_axi_U->coeff_3_V(coeff_3_V);
    fir_bundle_s_axi_U->coeff_4_V(coeff_4_V);
    fir_bundle_s_axi_U->coeff_5_V(coeff_5_V);
    fir_bundle_s_axi_U->coeff_6_V(coeff_6_V);
    fir_bundle_s_axi_U->coeff_7_V(coeff_7_V);
    fir_bundle_s_axi_U->coeff_8_V(coeff_8_V);
    fir_bundle_s_axi_U->coeff_9_V(coeff_9_V);
    Loop_STREAM_LOOP_pro_U0 = new Loop_STREAM_LOOP_pro("Loop_STREAM_LOOP_pro_U0");
    Loop_STREAM_LOOP_pro_U0->ap_clk(ap_clk);
    Loop_STREAM_LOOP_pro_U0->ap_rst(ap_rst_n_inv);
    Loop_STREAM_LOOP_pro_U0->ap_start(Loop_STREAM_LOOP_pro_U0_ap_start);
    Loop_STREAM_LOOP_pro_U0->ap_done(Loop_STREAM_LOOP_pro_U0_ap_done);
    Loop_STREAM_LOOP_pro_U0->ap_continue(Loop_STREAM_LOOP_pro_U0_ap_continue);
    Loop_STREAM_LOOP_pro_U0->ap_idle(Loop_STREAM_LOOP_pro_U0_ap_idle);
    Loop_STREAM_LOOP_pro_U0->ap_ready(Loop_STREAM_LOOP_pro_U0_ap_ready);
    Loop_STREAM_LOOP_pro_U0->stream_in_TDATA(stream_in_TDATA);
    Loop_STREAM_LOOP_pro_U0->stream_in_TVALID(stream_in_TVALID);
    Loop_STREAM_LOOP_pro_U0->stream_in_TREADY(Loop_STREAM_LOOP_pro_U0_stream_in_TREADY);
    Loop_STREAM_LOOP_pro_U0->stream_in_TKEEP(stream_in_TKEEP);
    Loop_STREAM_LOOP_pro_U0->stream_in_TSTRB(stream_in_TSTRB);
    Loop_STREAM_LOOP_pro_U0->stream_in_TUSER(stream_in_TUSER);
    Loop_STREAM_LOOP_pro_U0->stream_in_TLAST(stream_in_TLAST);
    Loop_STREAM_LOOP_pro_U0->stream_in_TID(stream_in_TID);
    Loop_STREAM_LOOP_pro_U0->stream_in_TDEST(stream_in_TDEST);
    Loop_STREAM_LOOP_pro_U0->coeff_9_V(coeff_9_V);
    Loop_STREAM_LOOP_pro_U0->coeff_8_V(coeff_8_V);
    Loop_STREAM_LOOP_pro_U0->coeff_7_V(coeff_7_V);
    Loop_STREAM_LOOP_pro_U0->coeff_6_V(coeff_6_V);
    Loop_STREAM_LOOP_pro_U0->coeff_5_V(coeff_5_V);
    Loop_STREAM_LOOP_pro_U0->coeff_4_V(coeff_4_V);
    Loop_STREAM_LOOP_pro_U0->coeff_3_V(coeff_3_V);
    Loop_STREAM_LOOP_pro_U0->coeff_2_V(coeff_2_V);
    Loop_STREAM_LOOP_pro_U0->coeff_1_V(coeff_1_V);
    Loop_STREAM_LOOP_pro_U0->coeff_0_V(coeff_0_V);
    Loop_STREAM_LOOP_pro_U0->stream_out_TDATA(Loop_STREAM_LOOP_pro_U0_stream_out_TDATA);
    Loop_STREAM_LOOP_pro_U0->stream_out_TVALID(Loop_STREAM_LOOP_pro_U0_stream_out_TVALID);
    Loop_STREAM_LOOP_pro_U0->stream_out_TREADY(stream_out_TREADY);
    Loop_STREAM_LOOP_pro_U0->stream_out_TKEEP(Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP);
    Loop_STREAM_LOOP_pro_U0->stream_out_TSTRB(Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB);
    Loop_STREAM_LOOP_pro_U0->stream_out_TUSER(Loop_STREAM_LOOP_pro_U0_stream_out_TUSER);
    Loop_STREAM_LOOP_pro_U0->stream_out_TLAST(Loop_STREAM_LOOP_pro_U0_stream_out_TLAST);
    Loop_STREAM_LOOP_pro_U0->stream_out_TID(Loop_STREAM_LOOP_pro_U0_stream_out_TID);
    Loop_STREAM_LOOP_pro_U0->stream_out_TDEST(Loop_STREAM_LOOP_pro_U0_stream_out_TDEST);

    SC_METHOD(thread_Loop_STREAM_LOOP_pro_U0_ap_continue);

    SC_METHOD(thread_Loop_STREAM_LOOP_pro_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Loop_STREAM_LOOP_pro_U0_start_full_n);

    SC_METHOD(thread_Loop_STREAM_LOOP_pro_U0_start_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_ap_ready );

    SC_METHOD(thread_stream_in_TREADY);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_in_TREADY );

    SC_METHOD(thread_stream_out_TDATA);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TDATA );

    SC_METHOD(thread_stream_out_TDEST);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TDEST );

    SC_METHOD(thread_stream_out_TID);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TID );

    SC_METHOD(thread_stream_out_TKEEP);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP );

    SC_METHOD(thread_stream_out_TLAST);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TLAST );

    SC_METHOD(thread_stream_out_TSTRB);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB );

    SC_METHOD(thread_stream_out_TUSER);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TUSER );

    SC_METHOD(thread_stream_out_TVALID);
    sensitive << ( Loop_STREAM_LOOP_pro_U0_stream_out_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_bundle_AWVALID, "(port)s_axi_bundle_AWVALID");
    sc_trace(mVcdFile, s_axi_bundle_AWREADY, "(port)s_axi_bundle_AWREADY");
    sc_trace(mVcdFile, s_axi_bundle_AWADDR, "(port)s_axi_bundle_AWADDR");
    sc_trace(mVcdFile, s_axi_bundle_WVALID, "(port)s_axi_bundle_WVALID");
    sc_trace(mVcdFile, s_axi_bundle_WREADY, "(port)s_axi_bundle_WREADY");
    sc_trace(mVcdFile, s_axi_bundle_WDATA, "(port)s_axi_bundle_WDATA");
    sc_trace(mVcdFile, s_axi_bundle_WSTRB, "(port)s_axi_bundle_WSTRB");
    sc_trace(mVcdFile, s_axi_bundle_ARVALID, "(port)s_axi_bundle_ARVALID");
    sc_trace(mVcdFile, s_axi_bundle_ARREADY, "(port)s_axi_bundle_ARREADY");
    sc_trace(mVcdFile, s_axi_bundle_ARADDR, "(port)s_axi_bundle_ARADDR");
    sc_trace(mVcdFile, s_axi_bundle_RVALID, "(port)s_axi_bundle_RVALID");
    sc_trace(mVcdFile, s_axi_bundle_RREADY, "(port)s_axi_bundle_RREADY");
    sc_trace(mVcdFile, s_axi_bundle_RDATA, "(port)s_axi_bundle_RDATA");
    sc_trace(mVcdFile, s_axi_bundle_RRESP, "(port)s_axi_bundle_RRESP");
    sc_trace(mVcdFile, s_axi_bundle_BVALID, "(port)s_axi_bundle_BVALID");
    sc_trace(mVcdFile, s_axi_bundle_BREADY, "(port)s_axi_bundle_BREADY");
    sc_trace(mVcdFile, s_axi_bundle_BRESP, "(port)s_axi_bundle_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, stream_in_TDATA, "(port)stream_in_TDATA");
    sc_trace(mVcdFile, stream_in_TKEEP, "(port)stream_in_TKEEP");
    sc_trace(mVcdFile, stream_in_TSTRB, "(port)stream_in_TSTRB");
    sc_trace(mVcdFile, stream_in_TUSER, "(port)stream_in_TUSER");
    sc_trace(mVcdFile, stream_in_TLAST, "(port)stream_in_TLAST");
    sc_trace(mVcdFile, stream_in_TID, "(port)stream_in_TID");
    sc_trace(mVcdFile, stream_in_TDEST, "(port)stream_in_TDEST");
    sc_trace(mVcdFile, stream_out_TDATA, "(port)stream_out_TDATA");
    sc_trace(mVcdFile, stream_out_TKEEP, "(port)stream_out_TKEEP");
    sc_trace(mVcdFile, stream_out_TSTRB, "(port)stream_out_TSTRB");
    sc_trace(mVcdFile, stream_out_TUSER, "(port)stream_out_TUSER");
    sc_trace(mVcdFile, stream_out_TLAST, "(port)stream_out_TLAST");
    sc_trace(mVcdFile, stream_out_TID, "(port)stream_out_TID");
    sc_trace(mVcdFile, stream_out_TDEST, "(port)stream_out_TDEST");
    sc_trace(mVcdFile, stream_in_TVALID, "(port)stream_in_TVALID");
    sc_trace(mVcdFile, stream_in_TREADY, "(port)stream_in_TREADY");
    sc_trace(mVcdFile, stream_out_TVALID, "(port)stream_out_TVALID");
    sc_trace(mVcdFile, stream_out_TREADY, "(port)stream_out_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, coeff_0_V, "coeff_0_V");
    sc_trace(mVcdFile, coeff_1_V, "coeff_1_V");
    sc_trace(mVcdFile, coeff_2_V, "coeff_2_V");
    sc_trace(mVcdFile, coeff_3_V, "coeff_3_V");
    sc_trace(mVcdFile, coeff_4_V, "coeff_4_V");
    sc_trace(mVcdFile, coeff_5_V, "coeff_5_V");
    sc_trace(mVcdFile, coeff_6_V, "coeff_6_V");
    sc_trace(mVcdFile, coeff_7_V, "coeff_7_V");
    sc_trace(mVcdFile, coeff_8_V, "coeff_8_V");
    sc_trace(mVcdFile, coeff_9_V, "coeff_9_V");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_ap_start, "Loop_STREAM_LOOP_pro_U0_ap_start");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_ap_done, "Loop_STREAM_LOOP_pro_U0_ap_done");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_ap_continue, "Loop_STREAM_LOOP_pro_U0_ap_continue");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_ap_idle, "Loop_STREAM_LOOP_pro_U0_ap_idle");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_ap_ready, "Loop_STREAM_LOOP_pro_U0_ap_ready");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_in_TREADY, "Loop_STREAM_LOOP_pro_U0_stream_in_TREADY");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TDATA, "Loop_STREAM_LOOP_pro_U0_stream_out_TDATA");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TVALID, "Loop_STREAM_LOOP_pro_U0_stream_out_TVALID");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP, "Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB, "Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TUSER, "Loop_STREAM_LOOP_pro_U0_stream_out_TUSER");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TLAST, "Loop_STREAM_LOOP_pro_U0_stream_out_TLAST");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TID, "Loop_STREAM_LOOP_pro_U0_stream_out_TID");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_stream_out_TDEST, "Loop_STREAM_LOOP_pro_U0_stream_out_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_start_full_n, "Loop_STREAM_LOOP_pro_U0_start_full_n");
    sc_trace(mVcdFile, Loop_STREAM_LOOP_pro_U0_start_write, "Loop_STREAM_LOOP_pro_U0_start_write");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fir_bundle_s_axi_U;
    delete Loop_STREAM_LOOP_pro_U0;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_Loop_STREAM_LOOP_pro_U0_ap_continue() {
    Loop_STREAM_LOOP_pro_U0_ap_continue = ap_const_logic_1;
}

void fir::thread_Loop_STREAM_LOOP_pro_U0_ap_start() {
    Loop_STREAM_LOOP_pro_U0_ap_start = ap_start.read();
}

void fir::thread_Loop_STREAM_LOOP_pro_U0_start_full_n() {
    Loop_STREAM_LOOP_pro_U0_start_full_n = ap_const_logic_1;
}

void fir::thread_Loop_STREAM_LOOP_pro_U0_start_write() {
    Loop_STREAM_LOOP_pro_U0_start_write = ap_const_logic_0;
}

void fir::thread_ap_done() {
    ap_done = Loop_STREAM_LOOP_pro_U0_ap_done.read();
}

void fir::thread_ap_idle() {
    ap_idle = Loop_STREAM_LOOP_pro_U0_ap_idle.read();
}

void fir::thread_ap_ready() {
    ap_ready = Loop_STREAM_LOOP_pro_U0_ap_ready.read();
}

void fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fir::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void fir::thread_ap_sync_done() {
    ap_sync_done = Loop_STREAM_LOOP_pro_U0_ap_done.read();
}

void fir::thread_ap_sync_ready() {
    ap_sync_ready = Loop_STREAM_LOOP_pro_U0_ap_ready.read();
}

void fir::thread_stream_in_TREADY() {
    stream_in_TREADY = Loop_STREAM_LOOP_pro_U0_stream_in_TREADY.read();
}

void fir::thread_stream_out_TDATA() {
    stream_out_TDATA = Loop_STREAM_LOOP_pro_U0_stream_out_TDATA.read();
}

void fir::thread_stream_out_TDEST() {
    stream_out_TDEST = Loop_STREAM_LOOP_pro_U0_stream_out_TDEST.read();
}

void fir::thread_stream_out_TID() {
    stream_out_TID = Loop_STREAM_LOOP_pro_U0_stream_out_TID.read();
}

void fir::thread_stream_out_TKEEP() {
    stream_out_TKEEP = Loop_STREAM_LOOP_pro_U0_stream_out_TKEEP.read();
}

void fir::thread_stream_out_TLAST() {
    stream_out_TLAST = Loop_STREAM_LOOP_pro_U0_stream_out_TLAST.read();
}

void fir::thread_stream_out_TSTRB() {
    stream_out_TSTRB = Loop_STREAM_LOOP_pro_U0_stream_out_TSTRB.read();
}

void fir::thread_stream_out_TUSER() {
    stream_out_TUSER = Loop_STREAM_LOOP_pro_U0_stream_out_TUSER.read();
}

void fir::thread_stream_out_TVALID() {
    stream_out_TVALID = Loop_STREAM_LOOP_pro_U0_stream_out_TVALID.read();
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_bundle_AWVALID\" :  \"" << s_axi_bundle_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_bundle_AWREADY\" :  \"" << s_axi_bundle_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_AWADDR\" :  \"" << s_axi_bundle_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_WVALID\" :  \"" << s_axi_bundle_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_WREADY\" :  \"" << s_axi_bundle_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_WDATA\" :  \"" << s_axi_bundle_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_WSTRB\" :  \"" << s_axi_bundle_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_ARVALID\" :  \"" << s_axi_bundle_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_ARREADY\" :  \"" << s_axi_bundle_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_ARADDR\" :  \"" << s_axi_bundle_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_RVALID\" :  \"" << s_axi_bundle_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_RREADY\" :  \"" << s_axi_bundle_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_RDATA\" :  \"" << s_axi_bundle_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_RRESP\" :  \"" << s_axi_bundle_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_BVALID\" :  \"" << s_axi_bundle_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_bundle_BREADY\" :  \"" << s_axi_bundle_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_bundle_BRESP\" :  \"" << s_axi_bundle_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDATA\" :  \"" << stream_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TKEEP\" :  \"" << stream_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TSTRB\" :  \"" << stream_in_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TUSER\" :  \"" << stream_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TLAST\" :  \"" << stream_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TID\" :  \"" << stream_in_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDEST\" :  \"" << stream_in_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TDATA\" :  \"" << stream_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TKEEP\" :  \"" << stream_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TSTRB\" :  \"" << stream_out_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TUSER\" :  \"" << stream_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TLAST\" :  \"" << stream_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TID\" :  \"" << stream_out_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TDEST\" :  \"" << stream_out_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TVALID\" :  \"" << stream_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_in_TREADY\" :  \"" << stream_in_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TVALID\" :  \"" << stream_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_TREADY\" :  \"" << stream_out_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

