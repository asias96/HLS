// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gauss_HH_
#define _gauss_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AXIvideo2Mat.h"
#include "gauss_blur.h"
#include "Mat2AXIvideo.h"
#include "fifo_w8_d2_A.h"
#include "start_for_gauss_blur_U0.h"
#include "start_for_Mat2AXIvideo_U0.h"
#include "gauss_bun_1_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_BUN_1_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_BUN_1_DATA_WIDTH = 32>
struct gauss : public sc_module {
    // Port declarations 38
    sc_in< sc_logic > s_axi_bun_1_AWVALID;
    sc_out< sc_logic > s_axi_bun_1_AWREADY;
    sc_in< sc_uint<C_S_AXI_BUN_1_ADDR_WIDTH> > s_axi_bun_1_AWADDR;
    sc_in< sc_logic > s_axi_bun_1_WVALID;
    sc_out< sc_logic > s_axi_bun_1_WREADY;
    sc_in< sc_uint<C_S_AXI_BUN_1_DATA_WIDTH> > s_axi_bun_1_WDATA;
    sc_in< sc_uint<C_S_AXI_BUN_1_DATA_WIDTH/8> > s_axi_bun_1_WSTRB;
    sc_in< sc_logic > s_axi_bun_1_ARVALID;
    sc_out< sc_logic > s_axi_bun_1_ARREADY;
    sc_in< sc_uint<C_S_AXI_BUN_1_ADDR_WIDTH> > s_axi_bun_1_ARADDR;
    sc_out< sc_logic > s_axi_bun_1_RVALID;
    sc_in< sc_logic > s_axi_bun_1_RREADY;
    sc_out< sc_uint<C_S_AXI_BUN_1_DATA_WIDTH> > s_axi_bun_1_RDATA;
    sc_out< sc_lv<2> > s_axi_bun_1_RRESP;
    sc_out< sc_logic > s_axi_bun_1_BVALID;
    sc_in< sc_logic > s_axi_bun_1_BREADY;
    sc_out< sc_lv<2> > s_axi_bun_1_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<8> > input_stream_TDATA;
    sc_in< sc_lv<1> > input_stream_TKEEP;
    sc_in< sc_lv<1> > input_stream_TSTRB;
    sc_in< sc_lv<1> > input_stream_TUSER;
    sc_in< sc_lv<1> > input_stream_TLAST;
    sc_in< sc_lv<1> > input_stream_TID;
    sc_in< sc_lv<1> > input_stream_TDEST;
    sc_out< sc_lv<8> > output_stream_TDATA;
    sc_out< sc_lv<1> > output_stream_TKEEP;
    sc_out< sc_lv<1> > output_stream_TSTRB;
    sc_out< sc_lv<1> > output_stream_TUSER;
    sc_out< sc_lv<1> > output_stream_TLAST;
    sc_out< sc_lv<1> > output_stream_TID;
    sc_out< sc_lv<1> > output_stream_TDEST;
    sc_in< sc_logic > input_stream_TVALID;
    sc_out< sc_logic > input_stream_TREADY;
    sc_out< sc_logic > output_stream_TVALID;
    sc_in< sc_logic > output_stream_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    gauss(sc_module_name name);
    SC_HAS_PROCESS(gauss);

    ~gauss();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    gauss_bun_1_s_axi<C_S_AXI_BUN_1_ADDR_WIDTH,C_S_AXI_BUN_1_DATA_WIDTH>* gauss_bun_1_s_axi_U;
    AXIvideo2Mat* AXIvideo2Mat_U0;
    gauss_blur* gauss_blur_U0;
    Mat2AXIvideo* Mat2AXIvideo_U0;
    fifo_w8_d2_A* img_in_data_stream_0_U;
    fifo_w8_d2_A* img_out_data_stream_s_U;
    start_for_gauss_blur_U0* start_for_gauss_blur_U0_U;
    start_for_Mat2AXIvideo_U0* start_for_Mat2AXIvideo_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_start;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_done;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_continue;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_idle;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_ready;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_out;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_write;
    sc_signal< sc_logic > AXIvideo2Mat_U0_input_stream_TREADY;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_V_write;
    sc_signal< sc_logic > gauss_blur_U0_ap_start;
    sc_signal< sc_logic > gauss_blur_U0_ap_done;
    sc_signal< sc_logic > gauss_blur_U0_ap_continue;
    sc_signal< sc_logic > gauss_blur_U0_ap_idle;
    sc_signal< sc_logic > gauss_blur_U0_ap_ready;
    sc_signal< sc_logic > gauss_blur_U0_start_out;
    sc_signal< sc_logic > gauss_blur_U0_start_write;
    sc_signal< sc_logic > gauss_blur_U0_img_in_data_stream_V_read;
    sc_signal< sc_lv<8> > gauss_blur_U0_img_out_data_stream_V_din;
    sc_signal< sc_logic > gauss_blur_U0_img_out_data_stream_V_write;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_start;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_done;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_continue;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_idle;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_ready;
    sc_signal< sc_logic > Mat2AXIvideo_U0_img_data_stream_V_read;
    sc_signal< sc_lv<8> > Mat2AXIvideo_U0_output_stream_TDATA;
    sc_signal< sc_logic > Mat2AXIvideo_U0_output_stream_TVALID;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_output_stream_TKEEP;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_output_stream_TSTRB;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_output_stream_TUSER;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_output_stream_TLAST;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_output_stream_TID;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_output_stream_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > img_in_data_stream_0_full_n;
    sc_signal< sc_lv<8> > img_in_data_stream_0_dout;
    sc_signal< sc_logic > img_in_data_stream_0_empty_n;
    sc_signal< sc_logic > img_out_data_stream_s_full_n;
    sc_signal< sc_lv<8> > img_out_data_stream_s_dout;
    sc_signal< sc_logic > img_out_data_stream_s_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_gauss_blur_U0_din;
    sc_signal< sc_logic > start_for_gauss_blur_U0_full_n;
    sc_signal< sc_lv<1> > start_for_gauss_blur_U0_dout;
    sc_signal< sc_logic > start_for_gauss_blur_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_Mat2AXIvideo_U0_din;
    sc_signal< sc_logic > start_for_Mat2AXIvideo_U0_full_n;
    sc_signal< sc_lv<1> > start_for_Mat2AXIvideo_U0_dout;
    sc_signal< sc_logic > start_for_Mat2AXIvideo_U0_empty_n;
    sc_signal< sc_logic > Mat2AXIvideo_U0_start_full_n;
    sc_signal< sc_logic > Mat2AXIvideo_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_AXIvideo2Mat_U0_ap_continue();
    void thread_AXIvideo2Mat_U0_ap_start();
    void thread_Mat2AXIvideo_U0_ap_continue();
    void thread_Mat2AXIvideo_U0_ap_start();
    void thread_Mat2AXIvideo_U0_start_full_n();
    void thread_Mat2AXIvideo_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_gauss_blur_U0_ap_continue();
    void thread_gauss_blur_U0_ap_start();
    void thread_input_stream_TREADY();
    void thread_output_stream_TDATA();
    void thread_output_stream_TDEST();
    void thread_output_stream_TID();
    void thread_output_stream_TKEEP();
    void thread_output_stream_TLAST();
    void thread_output_stream_TSTRB();
    void thread_output_stream_TUSER();
    void thread_output_stream_TVALID();
    void thread_start_for_Mat2AXIvideo_U0_din();
    void thread_start_for_gauss_blur_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
