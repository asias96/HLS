-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gauss_blur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_in_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_data_stream_V_empty_n : IN STD_LOGIC;
    img_in_data_stream_V_read : OUT STD_LOGIC;
    img_out_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_V_full_n : IN STD_LOGIC;
    img_out_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of gauss_blur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D1 : STD_LOGIC_VECTOR (9 downto 0) := "1011010001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_501 : STD_LOGIC_VECTOR (10 downto 0) := "10100000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv18_133 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100110011";
    constant ap_const_lv18_1FB : STD_LOGIC_VECTOR (17 downto 0) := "000000000111111011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_344 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001101000100";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_in_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_out_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal or_cond7_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_690_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_203 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_638 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_11_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_11_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_658_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_658_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_662 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_4_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_val_1_addr_reg_674 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_685_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_685_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_685_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_690_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_699_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_699_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pWindow_val_2_0_re_fu_345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pWindow_val_2_0_re_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal pWindow_val_1_0_re_fu_352_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pWindow_val_1_0_re_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_1_i_fu_532_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_1_i_reg_714 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_538_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp9_reg_719 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal window_val_1_0_load_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp4_reg_729 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_554_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp5_reg_734 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_562_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp7_reg_739 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_569_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp8_reg_744 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_11_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal buff_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_val_0_ce0 : STD_LOGIC;
    signal buff_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_val_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_val_0_ce1 : STD_LOGIC;
    signal buff_val_0_we1 : STD_LOGIC;
    signal buff_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_val_1_ce0 : STD_LOGIC;
    signal buff_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_val_1_ce1 : STD_LOGIC;
    signal buff_val_1_we1 : STD_LOGIC;
    signal i_reg_192 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_col_assign_phi_fu_207_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_2_s_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_s_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_0_s_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal pWindow_val_0_0_re_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_s_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_s_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_s_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_in_val_0_s_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_s_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_s_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_10_fu_233_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_310_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_2_2_i_fu_371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_0_1_i_fu_425_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_i_fu_438_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_cast_fu_480_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp5_cast_fu_483_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp3_fu_486_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp7_cast_fu_496_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp8_cast_fu_499_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp3_cast_fu_492_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp6_fu_502_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal acc_V_2_2_i_fu_508_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond6_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v0_assign_fu_514_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_1_i_fu_532_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_1_i_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_538_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_538_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_546_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_554_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_554_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_562_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_562_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_538_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_546_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_554_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_562_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_569_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_569_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_0_1_i_fu_425_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_1_1_i_fu_532_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_i_fu_438_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_2_i_fu_371_p00 : STD_LOGIC_VECTOR (17 downto 0);

    component gauss_mul_mul_8ns_11ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component gauss_mac_muladd_8ns_10ns_18ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component gauss_mac_muladd_8ns_10ns_19ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component gauss_mac_muladd_8ns_10ns_18ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component gauss_blur_buff_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buff_val_0_U : component gauss_blur_buff_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_val_0_address0,
        ce0 => buff_val_0_ce0,
        q0 => buff_val_0_q0,
        address1 => buff_val_0_address1,
        ce1 => buff_val_0_ce1,
        we1 => buff_val_0_we1,
        d1 => img_in_data_stream_V_dout);

    buff_val_1_U : component gauss_blur_buff_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_val_1_address0,
        ce0 => buff_val_1_ce0,
        q0 => buff_val_1_q0,
        address1 => buff_val_1_addr_reg_674,
        ce1 => buff_val_1_ce1,
        we1 => buff_val_1_we1,
        d1 => buff_val_0_q0);

    gauss_mul_mul_8ns_11ns_19_1_1_U9 : component gauss_mul_mul_8ns_11ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => ret_V_1_1_i_fu_532_p0,
        din1 => ret_V_1_1_i_fu_532_p1,
        dout => ret_V_1_1_i_fu_532_p2);

    gauss_mac_muladd_8ns_10ns_18ns_18_1_1_U10 : component gauss_mac_muladd_8ns_10ns_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_538_p0,
        din1 => grp_fu_538_p1,
        din2 => grp_fu_538_p2,
        dout => grp_fu_538_p3);

    gauss_mac_muladd_8ns_10ns_18ns_18_1_1_U11 : component gauss_mac_muladd_8ns_10ns_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_546_p0,
        din1 => grp_fu_546_p1,
        din2 => grp_fu_546_p2,
        dout => grp_fu_546_p3);

    gauss_mac_muladd_8ns_10ns_18ns_18_1_1_U12 : component gauss_mac_muladd_8ns_10ns_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_554_p0,
        din1 => grp_fu_554_p1,
        din2 => grp_fu_554_p2,
        dout => grp_fu_554_p3);

    gauss_mac_muladd_8ns_10ns_19ns_19_1_1_U13 : component gauss_mac_muladd_8ns_10ns_19ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_562_p0,
        din1 => grp_fu_562_p1,
        din2 => ret_V_1_1_i_reg_714,
        dout => grp_fu_562_p3);

    gauss_mac_muladd_8ns_10ns_18ns_19_1_1_U14 : component gauss_mac_muladd_8ns_10ns_18ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_569_p0,
        din1 => grp_fu_569_p1,
        din2 => grp_fu_569_p2,
        dout => grp_fu_569_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond3_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond3_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((exitcond3_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_658 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_203 <= j_reg_662;
            elsif (((exitcond3_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_assign_reg_203 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_192 <= i_1_reg_638;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_192 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_255_p2 = ap_const_lv1_0) and (tmp_4_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buff_val_1_addr_reg_674 <= tmp_5_fu_273_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_658 <= exitcond_fu_255_p2;
                exitcond_reg_658_pp0_iter1_reg <= exitcond_reg_658;
                icmp1_reg_699 <= icmp1_fu_320_p2;
                or_cond7_reg_690_pp0_iter1_reg <= or_cond7_reg_690;
                or_cond_reg_685_pp0_iter1_reg <= or_cond_reg_685;
                tmp_4_reg_667_pp0_iter1_reg <= tmp_4_reg_667;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_658_pp0_iter2_reg <= exitcond_reg_658_pp0_iter1_reg;
                icmp1_reg_699_pp0_iter2_reg <= icmp1_reg_699;
                icmp1_reg_699_pp0_iter3_reg <= icmp1_reg_699_pp0_iter2_reg;
                or_cond7_reg_690_pp0_iter2_reg <= or_cond7_reg_690_pp0_iter1_reg;
                or_cond7_reg_690_pp0_iter3_reg <= or_cond7_reg_690_pp0_iter2_reg;
                or_cond7_reg_690_pp0_iter4_reg <= or_cond7_reg_690_pp0_iter3_reg;
                or_cond_reg_685_pp0_iter2_reg <= or_cond_reg_685_pp0_iter1_reg;
                or_cond_reg_685_pp0_iter3_reg <= or_cond_reg_685_pp0_iter2_reg;
                pWindow_val_1_0_re_reg_709 <= pWindow_val_1_0_re_fu_352_p3;
                pWindow_val_2_0_re_reg_704 <= pWindow_val_2_0_re_fu_345_p3;
                ret_V_1_1_i_reg_714 <= ret_V_1_1_i_fu_532_p2;
                tmp_11_reg_749 <= tmp_11_fu_524_p3;
                tmp_4_reg_667_pp0_iter2_reg <= tmp_4_reg_667_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_638 <= i_1_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_648 <= icmp_fu_243_p2;
                tmp_2_11_reg_653 <= tmp_2_11_fu_249_p2;
                tmp_reg_643 <= tmp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_reg_662 <= j_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond7_reg_690 <= or_cond7_fu_290_p2;
                or_cond_reg_685 <= or_cond_fu_279_p2;
                tmp_4_reg_667 <= tmp_4_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_685_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                pix_in_val_0_s_fu_118 <= tmp_12_reg_694;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp4_reg_729 <= grp_fu_546_p3;
                tmp5_reg_734 <= grp_fu_554_p3;
                tmp7_reg_739 <= grp_fu_562_p3;
                tmp8_reg_744 <= grp_fu_569_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp9_reg_719 <= grp_fu_538_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_685 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_12_reg_694 <= img_in_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_667 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_s_fu_98 <= buff_val_0_q0;
                tmp_2_s_fu_94 <= buff_val_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_658_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_val_0_0_s_fu_102 <= pWindow_val_0_0_re_fu_410_p3;
                window_val_0_1_s_fu_106 <= window_val_0_0_s_fu_102;
                window_val_1_1_s_fu_114 <= window_val_1_0_load_reg_724;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_658_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_val_1_0_load_reg_724 <= window_val_1_0_s_fu_110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_658_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_val_1_0_s_fu_110 <= pWindow_val_1_0_re_fu_352_p3;
                window_val_2_0_s_fu_122 <= pWindow_val_2_0_re_fu_345_p3;
                window_val_2_1_s_fu_126 <= window_val_2_0_s_fu_122;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, exitcond3_fu_215_p2, ap_CS_fsm_state2, exitcond_fu_255_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_V_2_2_i_fu_508_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_492_p1) + unsigned(tmp6_fu_502_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_in_data_stream_V_empty_n, img_out_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_685, ap_enable_reg_pp0_iter5, or_cond7_reg_690_pp0_iter4_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond7_reg_690_pp0_iter4_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((or_cond_reg_685 = ap_const_lv1_1) and (img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_in_data_stream_V_empty_n, img_out_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_685, ap_enable_reg_pp0_iter5, or_cond7_reg_690_pp0_iter4_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond7_reg_690_pp0_iter4_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((or_cond_reg_685 = ap_const_lv1_1) and (img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_in_data_stream_V_empty_n, img_out_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_685, ap_enable_reg_pp0_iter5, or_cond7_reg_690_pp0_iter4_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond7_reg_690_pp0_iter4_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((or_cond_reg_685 = ap_const_lv1_1) and (img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(img_in_data_stream_V_empty_n, or_cond_reg_685)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((or_cond_reg_685 = ap_const_lv1_1) and (img_in_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter5_assign_proc : process(img_out_data_stream_V_full_n, or_cond7_reg_690_pp0_iter4_reg)
    begin
                ap_block_state8_pp0_stage0_iter5 <= ((or_cond7_reg_690_pp0_iter4_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_255_p2)
    begin
        if ((exitcond_fu_255_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond3_fu_215_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond3_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_207_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, col_assign_reg_203, exitcond_reg_658, j_reg_662)
    begin
        if (((exitcond_reg_658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_col_assign_phi_fu_207_p4 <= j_reg_662;
        else 
            ap_phi_mux_col_assign_phi_fu_207_p4 <= col_assign_reg_203;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    buff_val_0_address0 <= tmp_5_fu_273_p1(11 - 1 downto 0);
    buff_val_0_address1 <= tmp_7_fu_305_p1(11 - 1 downto 0);

    buff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_val_0_ce0 <= ap_const_logic_1;
        else 
            buff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_val_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_val_0_ce1 <= ap_const_logic_1;
        else 
            buff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_val_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond_reg_685, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond_reg_685 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_val_0_we1 <= ap_const_logic_1;
        else 
            buff_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_val_1_address0 <= tmp_5_fu_273_p1(11 - 1 downto 0);

    buff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_val_1_ce0 <= ap_const_logic_1;
        else 
            buff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_val_1_ce1 <= ap_const_logic_1;
        else 
            buff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_val_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, tmp_4_reg_667)
    begin
        if (((tmp_4_reg_667 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_val_1_we1 <= ap_const_logic_1;
        else 
            buff_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_215_p2 <= "1" when (i_reg_192 = ap_const_lv10_2D1) else "0";
    exitcond_fu_255_p2 <= "1" when (ap_phi_mux_col_assign_phi_fu_207_p4 = ap_const_lv11_501) else "0";
    grp_fu_538_p0 <= grp_fu_538_p00(8 - 1 downto 0);
    grp_fu_538_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_val_2_0_s_fu_122),18));
    grp_fu_538_p1 <= ap_const_lv18_1FB(10 - 1 downto 0);
    grp_fu_538_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_2_i_fu_371_p0) * unsigned(ap_const_lv18_133), 18));
    grp_fu_546_p0 <= grp_fu_546_p00(8 - 1 downto 0);
    grp_fu_546_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pWindow_val_0_0_re_fu_410_p3),18));
    grp_fu_546_p1 <= ap_const_lv18_133(10 - 1 downto 0);
    grp_fu_546_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_0_1_i_fu_425_p0) * unsigned(ap_const_lv18_1FB), 18));
    grp_fu_554_p0 <= grp_fu_554_p00(8 - 1 downto 0);
    grp_fu_554_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_val_0_1_s_fu_106),18));
    grp_fu_554_p1 <= ap_const_lv18_133(10 - 1 downto 0);
    grp_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_i_fu_438_p0) * unsigned(ap_const_lv18_1FB), 18));
    grp_fu_562_p0 <= grp_fu_562_p00(8 - 1 downto 0);
    grp_fu_562_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_val_1_1_s_fu_114),18));
    grp_fu_562_p1 <= ap_const_lv18_1FB(10 - 1 downto 0);
    grp_fu_569_p0 <= grp_fu_569_p00(8 - 1 downto 0);
    grp_fu_569_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pWindow_val_2_0_re_reg_704),18));
    grp_fu_569_p1 <= ap_const_lv18_133(10 - 1 downto 0);
    grp_fu_569_p2 <= grp_fu_569_p20(18 - 1 downto 0);
    grp_fu_569_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_reg_719),19));
    i_1_fu_221_p2 <= std_logic_vector(unsigned(i_reg_192) + unsigned(ap_const_lv10_1));
    icmp1_fu_320_p2 <= "0" when (tmp_8_fu_310_p4 = ap_const_lv10_0) else "1";
    icmp_fu_243_p2 <= "0" when (tmp_1_10_fu_233_p4 = ap_const_lv9_0) else "1";

    img_in_data_stream_V_blk_n_assign_proc : process(img_in_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond_reg_685)
    begin
        if (((or_cond_reg_685 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_in_data_stream_V_blk_n <= img_in_data_stream_V_empty_n;
        else 
            img_in_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond_reg_685, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond_reg_685 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in_data_stream_V_read <= ap_const_logic_1;
        else 
            img_in_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_V_blk_n_assign_proc : process(img_out_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, or_cond7_reg_690_pp0_iter4_reg)
    begin
        if (((or_cond7_reg_690_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            img_out_data_stream_V_blk_n <= img_out_data_stream_V_full_n;
        else 
            img_out_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_V_din <= tmp_11_reg_749;

    img_out_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, or_cond7_reg_690_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond7_reg_690_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_out_data_stream_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond3_fu_215_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond3_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_261_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_assign_phi_fu_207_p4) + unsigned(ap_const_lv11_1));
    or_cond6_fu_475_p2 <= (tmp1_fu_471_p2 and or_cond_reg_685_pp0_iter3_reg);
    or_cond7_fu_290_p2 <= (tmp_9_fu_284_p2 and tmp_2_11_reg_653);
    or_cond_fu_279_p2 <= (tmp_reg_643 and tmp_4_fu_267_p2);
    pWindow_val_0_0_re_fu_410_p3 <= 
        pix_in_val_0_s_fu_118 when (tmp_4_reg_667_pp0_iter2_reg(0) = '1') else 
        window_val_0_0_s_fu_102;
    pWindow_val_1_0_re_fu_352_p3 <= 
        tmp_1_s_fu_98 when (tmp_4_reg_667_pp0_iter1_reg(0) = '1') else 
        window_val_1_0_s_fu_110;
    pWindow_val_2_0_re_fu_345_p3 <= 
        tmp_2_s_fu_94 when (tmp_4_reg_667_pp0_iter1_reg(0) = '1') else 
        window_val_2_0_s_fu_122;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_0_1_i_fu_425_p0 <= ret_V_0_1_i_fu_425_p00(8 - 1 downto 0);
    ret_V_0_1_i_fu_425_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_val_0_0_s_fu_102),18));
    ret_V_1_1_i_fu_532_p0 <= ret_V_1_1_i_fu_532_p00(8 - 1 downto 0);
    ret_V_1_1_i_fu_532_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_val_1_0_s_fu_110),19));
    ret_V_1_1_i_fu_532_p1 <= ap_const_lv19_344(11 - 1 downto 0);
    ret_V_1_i_fu_438_p0 <= ret_V_1_i_fu_438_p00(8 - 1 downto 0);
    ret_V_1_i_fu_438_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pWindow_val_1_0_re_reg_709),18));
    ret_V_2_2_i_fu_371_p0 <= ret_V_2_2_i_fu_371_p00(8 - 1 downto 0);
    ret_V_2_2_i_fu_371_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_val_2_1_s_fu_126),18));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_471_p2 <= (icmp_reg_648 and icmp1_reg_699_pp0_iter3_reg);
    tmp3_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_486_p2),20));
    tmp3_fu_486_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_480_p1) + unsigned(tmp5_cast_fu_483_p1));
    tmp4_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_reg_729),19));
    tmp5_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_reg_734),19));
    tmp6_fu_502_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_496_p1) + unsigned(tmp8_cast_fu_499_p1));
    tmp7_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_reg_739),20));
    tmp8_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_reg_744),20));
    tmp_11_fu_524_p3 <= 
        v0_assign_fu_514_p4 when (or_cond6_fu_475_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_1_10_fu_233_p4 <= i_reg_192(9 downto 1);
    tmp_2_11_fu_249_p2 <= "0" when (i_reg_192 = ap_const_lv10_0) else "1";
    tmp_4_fu_267_p2 <= "1" when (unsigned(ap_phi_mux_col_assign_phi_fu_207_p4) < unsigned(ap_const_lv11_500)) else "0";
    tmp_5_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_207_p4),64));
    tmp_7_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_203),64));
    tmp_8_fu_310_p4 <= col_assign_reg_203(10 downto 1);
    tmp_9_fu_284_p2 <= "0" when (ap_phi_mux_col_assign_phi_fu_207_p4 = ap_const_lv11_0) else "1";
    tmp_fu_227_p2 <= "1" when (unsigned(i_reg_192) < unsigned(ap_const_lv10_2D0)) else "0";
    v0_assign_fu_514_p4 <= acc_V_2_2_i_fu_508_p2(19 downto 12);
end behav;
