// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=451,HLS_VERSION=2018_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        probe_in,
        probe_in_ap_vld,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] probe_in;
input   probe_in_ap_vld;
output  [31:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] probe_in_preg;
reg   [31:0] probe_in_in_sig;
reg    probe_in_ap_vld_preg;
reg    probe_in_ap_vld_in_sig;
reg   [31:0] data_in_8;
reg   [31:0] data_in_7;
reg   [31:0] data_in_6;
reg   [31:0] data_in_5;
reg   [31:0] data_in_4;
reg   [31:0] data_in_3;
reg   [31:0] data_in_2;
reg   [31:0] data_in_1;
reg   [31:0] data_in_0;
reg    probe_in_blk_n;
reg    ap_block_state1;
reg   [31:0] data_in_2_load_reg_263;
wire   [31:0] tmp6_fu_127_p2;
reg   [31:0] tmp6_reg_268;
wire   [31:0] tmp7_fu_139_p2;
reg   [31:0] tmp7_reg_273;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_3_fu_61_p2;
wire   [31:0] tmp_6_fu_93_p2;
wire   [31:0] tmp_4_3_fu_67_p2;
wire   [31:0] tmp_5_fu_77_p2;
wire   [31:0] tmp_7_fu_115_p2;
wire   [31:0] tmp8_fu_133_p2;
wire   [31:0] tmp_4_7_fu_99_p2;
wire   [31:0] tmp_4_fu_206_p2;
wire   [31:0] tmp_1_fu_159_p2;
wire   [31:0] tmp3_fu_223_p2;
wire   [31:0] tmp2_fu_229_p2;
wire   [31:0] tmp1_fu_217_p2;
wire   [31:0] tmp_2_fu_175_p2;
wire   [31:0] tmp5_fu_241_p2;
wire   [31:0] tmp4_fu_246_p2;
wire   [31:0] tmp_fu_235_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 probe_in_preg = 32'd0;
#0 probe_in_ap_vld_preg = 1'b0;
#0 data_in_8 = 32'd0;
#0 data_in_7 = 32'd0;
#0 data_in_6 = 32'd0;
#0 data_in_5 = 32'd0;
#0 data_in_4 = 32'd0;
#0 data_in_3 = 32'd0;
#0 data_in_2 = 32'd0;
#0 data_in_1 = 32'd0;
#0 data_in_0 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        probe_in_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            probe_in_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (probe_in_ap_vld == 1'b1))) begin
            probe_in_ap_vld_preg <= probe_in_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        probe_in_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (probe_in_ap_vld == 1'b1))) begin
            probe_in_preg <= probe_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (probe_in_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_0 <= probe_in_in_sig;
        data_in_1 <= data_in_0;
        data_in_2 <= data_in_1;
        data_in_2_load_reg_263 <= data_in_2;
        tmp6_reg_268 <= tmp6_fu_127_p2;
        tmp7_reg_273 <= tmp7_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_3 <= data_in_2_load_reg_263;
        data_in_4 <= data_in_3;
        data_in_5 <= data_in_4;
        data_in_6 <= data_in_5;
        data_in_7 <= data_in_6;
        data_in_8 <= data_in_7;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((probe_in_ap_vld == 1'b1)) begin
        probe_in_ap_vld_in_sig = probe_in_ap_vld;
    end else begin
        probe_in_ap_vld_in_sig = probe_in_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        probe_in_blk_n = probe_in_ap_vld;
    end else begin
        probe_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((probe_in_ap_vld == 1'b1)) begin
        probe_in_in_sig = probe_in;
    end else begin
        probe_in_in_sig = probe_in_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (probe_in_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (probe_in_ap_vld_in_sig == 1'b0));
end

assign out_r = (tmp4_fu_246_p2 + tmp_fu_235_p2);

assign tmp1_fu_217_p2 = (data_in_3 + data_in_8);

assign tmp2_fu_229_p2 = (tmp3_fu_223_p2 + data_in_4);

assign tmp3_fu_223_p2 = (tmp_4_fu_206_p2 + tmp_1_fu_159_p2);

assign tmp4_fu_246_p2 = (tmp7_reg_273 + tmp5_fu_241_p2);

assign tmp5_fu_241_p2 = (tmp6_reg_268 + tmp_2_fu_175_p2);

assign tmp6_fu_127_p2 = (tmp_4_3_fu_67_p2 + tmp_5_fu_77_p2);

assign tmp7_fu_139_p2 = (tmp8_fu_133_p2 + tmp_4_7_fu_99_p2);

assign tmp8_fu_133_p2 = (probe_in_in_sig + tmp_7_fu_115_p2);

assign tmp_1_fu_159_p2 = data_in_7 << 32'd1;

assign tmp_2_fu_175_p2 = data_in_6 << 32'd2;

assign tmp_3_fu_61_p2 = data_in_5 << 32'd2;

assign tmp_4_3_fu_67_p2 = (tmp_3_fu_61_p2 - data_in_5);

assign tmp_4_7_fu_99_p2 = (tmp_6_fu_93_p2 - data_in_1);

assign tmp_4_fu_206_p2 = data_in_3 << 32'd2;

assign tmp_5_fu_77_p2 = data_in_2 << 32'd2;

assign tmp_6_fu_93_p2 = data_in_1 << 32'd2;

assign tmp_7_fu_115_p2 = data_in_0 << 32'd1;

assign tmp_fu_235_p2 = (tmp2_fu_229_p2 + tmp1_fu_217_p2);

endmodule //fir
