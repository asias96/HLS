-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rozmycie is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_in_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_data_stream_V_empty_n : IN STD_LOGIC;
    img_in_data_stream_V_read : OUT STD_LOGIC;
    img_out_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_V_full_n : IN STD_LOGIC;
    img_out_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of rozmycie is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D1 : STD_LOGIC_VECTOR (9 downto 0) := "1011010001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_501 : STD_LOGIC_VECTOR (10 downto 0) := "10100000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_13 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010011";
    constant ap_const_lv15_34 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110100";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_in_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_4_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_out_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal or_cond6_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_755_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_198 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_215_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_701 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op64_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_721_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_255_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_4_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_730_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_730_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_val_1_addr_reg_738 : STD_LOGIC_VECTOR (10 downto 0);
    signal buffer_val_0_addr_reg_744 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_750_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_750_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_755_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_755_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp6_reg_759 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_607_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_reg_764 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_615_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp9_reg_769 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_623_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp10_reg_774 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_591_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal buffer_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buffer_val_0_ce0 : STD_LOGIC;
    signal buffer_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_0_ce1 : STD_LOGIC;
    signal buffer_val_0_we1 : STD_LOGIC;
    signal buffer_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buffer_val_1_ce0 : STD_LOGIC;
    signal buffer_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_1_ce1 : STD_LOGIC;
    signal buffer_val_1_we1 : STD_LOGIC;
    signal i_reg_187 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_6_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp2_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal okno_val_0_0_s_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_0_0_fu_372_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_0_1_s_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_1_0_s_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_1_0_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_1_1_s_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_0_0_1_fu_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_2_0_s_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_2_0_fu_358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_2_1_s_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_227_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_273_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal okno_val_2_0_1_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal okno_val_1_0_1_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_387_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_395_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_0_1_i_cast_fu_383_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_413_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_421_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_1_i_cast_fu_409_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_16_fu_439_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_fu_447_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_1_2_i_cast_fu_435_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_1_2_i_fu_451_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_fu_469_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_fu_477_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_2_1_i_cast_fu_465_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_631_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_cast_fu_547_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_cast_fu_550_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_fu_553_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp9_cast_fu_563_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_cast_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_cast_fu_559_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_2_i_fu_575_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond5_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v0_assign_fu_581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_607_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_607_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_615_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_615_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_615_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_623_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_623_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_631_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_599_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_607_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_615_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_615_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_623_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_623_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_631_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component filtr_Gauss_mac_muladd_7ns_8ns_14ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component filtr_Gauss_mac_muladd_6ns_8ns_14ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component rozmycie_buffer_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buffer_val_0_U : component rozmycie_buffer_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_val_0_address0,
        ce0 => buffer_val_0_ce0,
        q0 => buffer_val_0_q0,
        address1 => buffer_val_0_addr_reg_744,
        ce1 => buffer_val_0_ce1,
        we1 => buffer_val_0_we1,
        d1 => img_in_data_stream_V_dout);

    buffer_val_1_U : component rozmycie_buffer_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_val_1_address0,
        ce0 => buffer_val_1_ce0,
        q0 => buffer_val_1_q0,
        address1 => buffer_val_1_addr_reg_738,
        ce1 => buffer_val_1_ce1,
        we1 => buffer_val_1_we1,
        d1 => buffer_val_0_q0);

    filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1_U9 : component filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_599_p0,
        din1 => grp_fu_599_p1,
        din2 => grp_fu_599_p2,
        dout => grp_fu_599_p3);

    filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1_U10 : component filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_607_p0,
        din1 => grp_fu_607_p1,
        din2 => grp_fu_607_p2,
        dout => grp_fu_607_p3);

    filtr_Gauss_mac_muladd_7ns_8ns_14ns_15_1_1_U11 : component filtr_Gauss_mac_muladd_7ns_8ns_14ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 14,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_615_p0,
        din1 => grp_fu_615_p1,
        din2 => grp_fu_615_p2,
        dout => grp_fu_615_p3);

    filtr_Gauss_mac_muladd_6ns_8ns_14ns_15_1_1_U12 : component filtr_Gauss_mac_muladd_6ns_8ns_14ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 14,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_623_p0,
        din1 => grp_fu_623_p1,
        din2 => grp_fu_623_p2,
        dout => grp_fu_623_p3);

    filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1_U13 : component filtr_Gauss_mac_muladd_6ns_8ns_14ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_631_p0,
        din1 => grp_fu_631_p1,
        din2 => grp_fu_631_p2,
        dout => grp_fu_631_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond3_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond3_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((exitcond3_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_198 <= j_fu_255_p2;
            elsif (((exitcond3_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_assign_reg_198 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_187 <= i_1_reg_701;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_187 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_249_p2 = ap_const_lv1_0) and (tmp_4_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer_val_0_addr_reg_744 <= tmp_6_fu_267_p1(11 - 1 downto 0);
                buffer_val_1_addr_reg_738 <= tmp_6_fu_267_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_721 <= exitcond_fu_249_p2;
                exitcond_reg_721_pp0_iter1_reg <= exitcond_reg_721;
                icmp1_reg_750_pp0_iter1_reg <= icmp1_reg_750;
                or_cond6_reg_755_pp0_iter1_reg <= or_cond6_reg_755;
                tmp_4_reg_730_pp0_iter1_reg <= tmp_4_reg_730;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_701 <= i_1_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp1_reg_750 <= icmp1_fu_283_p2;
                or_cond6_reg_755 <= or_cond6_fu_295_p2;
                tmp_4_reg_730 <= tmp_4_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp1_reg_750_pp0_iter2_reg <= icmp1_reg_750_pp0_iter1_reg;
                or_cond6_reg_755_pp0_iter2_reg <= or_cond6_reg_755_pp0_iter1_reg;
                or_cond6_reg_755_pp0_iter3_reg <= or_cond6_reg_755_pp0_iter2_reg;
                tmp_12_reg_779 <= tmp_12_fu_591_p3;
                tmp_4_reg_730_pp0_iter2_reg <= tmp_4_reg_730_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_711 <= icmp_fu_237_p2;
                tmp_2_reg_716 <= tmp_2_fu_243_p2;
                tmp_reg_706 <= tmp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_706 = ap_const_lv1_1) and (tmp_4_reg_730 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                okno_val_0_0_1_fu_120 <= img_in_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_721_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                okno_val_0_0_s_fu_104 <= okno_val_0_0_fu_372_p3;
                okno_val_0_1_s_fu_108 <= okno_val_0_0_s_fu_104;
                okno_val_1_0_s_fu_112 <= okno_val_1_0_fu_365_p3;
                okno_val_1_1_s_fu_116 <= okno_val_1_0_s_fu_112;
                okno_val_2_0_s_fu_124 <= okno_val_2_0_fu_358_p3;
                okno_val_2_1_s_fu_128 <= okno_val_2_0_s_fu_124;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp10_reg_774 <= grp_fu_623_p3;
                tmp6_reg_759 <= grp_fu_599_p3;
                tmp7_reg_764 <= grp_fu_607_p3;
                tmp9_reg_769 <= grp_fu_615_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_730 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp1_1_fu_100(7 downto 0) <= tmp1_fu_300_p1(7 downto 0);
                    tmp2_1_fu_96(7 downto 0) <= tmp2_fu_304_p1(7 downto 0);
            end if;
        end if;
    end process;
    tmp2_1_fu_96(31 downto 8) <= "000000000000000000000000";
    tmp1_1_fu_100(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, exitcond3_fu_209_p2, ap_CS_fsm_state2, exitcond_fu_249_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_V_2_2_i_fu_575_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_559_p1) + unsigned(tmp8_fu_569_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_in_data_stream_V_empty_n, img_out_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, or_cond6_reg_755_pp0_iter3_reg, ap_predicate_op64_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond6_reg_755_pp0_iter3_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op64_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_in_data_stream_V_empty_n, img_out_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, or_cond6_reg_755_pp0_iter3_reg, ap_predicate_op64_read_state4)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond6_reg_755_pp0_iter3_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op64_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_in_data_stream_V_empty_n, img_out_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, or_cond6_reg_755_pp0_iter3_reg, ap_predicate_op64_read_state4)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond6_reg_755_pp0_iter3_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op64_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(img_in_data_stream_V_empty_n, ap_predicate_op64_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((img_in_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op64_read_state4 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(img_out_data_stream_V_full_n, or_cond6_reg_755_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((or_cond6_reg_755_pp0_iter3_reg = ap_const_lv1_1) and (img_out_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_249_p2)
    begin
        if ((exitcond_fu_249_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond3_fu_209_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond3_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op64_read_state4_assign_proc : process(tmp_4_reg_730, tmp_reg_706)
    begin
                ap_predicate_op64_read_state4 <= ((tmp_reg_706 = ap_const_lv1_1) and (tmp_4_reg_730 = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;
    buffer_val_0_address0 <= tmp_6_fu_267_p1(11 - 1 downto 0);

    buffer_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_val_0_ce0 <= ap_const_logic_1;
        else 
            buffer_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_val_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_val_0_ce1 <= ap_const_logic_1;
        else 
            buffer_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_val_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_4_reg_730, tmp_reg_706, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_706 = ap_const_lv1_1) and (tmp_4_reg_730 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_val_0_we1 <= ap_const_logic_1;
        else 
            buffer_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_val_1_address0 <= tmp_6_fu_267_p1(11 - 1 downto 0);

    buffer_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_val_1_ce0 <= ap_const_logic_1;
        else 
            buffer_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_val_1_ce1 <= ap_const_logic_1;
        else 
            buffer_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_val_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_4_reg_730, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_4_reg_730 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_val_1_we1 <= ap_const_logic_1;
        else 
            buffer_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_209_p2 <= "1" when (i_reg_187 = ap_const_lv10_2D1) else "0";
    exitcond_fu_249_p2 <= "1" when (col_assign_reg_198 = ap_const_lv11_501) else "0";
    grp_fu_599_p0 <= ap_const_lv14_13(6 - 1 downto 0);
    grp_fu_599_p1 <= grp_fu_599_p10(8 - 1 downto 0);
    grp_fu_599_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_0_0_fu_372_p3),14));
    grp_fu_599_p2 <= std_logic_vector(unsigned(p_shl1_fu_395_p1) - unsigned(rhs_V_0_1_i_cast_fu_383_p1));
    grp_fu_607_p0 <= ap_const_lv14_13(6 - 1 downto 0);
    grp_fu_607_p1 <= grp_fu_607_p10(8 - 1 downto 0);
    grp_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_0_1_s_fu_108),14));
    grp_fu_607_p2 <= std_logic_vector(unsigned(p_shl2_fu_421_p1) - unsigned(rhs_V_1_i_cast_fu_409_p1));
    grp_fu_615_p0 <= ap_const_lv15_34(7 - 1 downto 0);
    grp_fu_615_p1 <= grp_fu_615_p10(8 - 1 downto 0);
    grp_fu_615_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_1_0_s_fu_112),15));
    grp_fu_615_p2 <= grp_fu_615_p20(14 - 1 downto 0);
    grp_fu_615_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_2_i_fu_451_p2),15));
    grp_fu_623_p0 <= ap_const_lv14_13(6 - 1 downto 0);
    grp_fu_623_p1 <= grp_fu_623_p10(8 - 1 downto 0);
    grp_fu_623_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_2_0_fu_358_p3),14));
    grp_fu_623_p2 <= grp_fu_623_p20(14 - 1 downto 0);
    grp_fu_623_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_631_p3),15));
    grp_fu_631_p0 <= ap_const_lv14_13(6 - 1 downto 0);
    grp_fu_631_p1 <= grp_fu_631_p10(8 - 1 downto 0);
    grp_fu_631_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_2_1_s_fu_128),14));
    grp_fu_631_p2 <= std_logic_vector(unsigned(p_shl_fu_477_p1) - unsigned(rhs_V_2_1_i_cast_fu_465_p1));
    i_1_fu_215_p2 <= std_logic_vector(unsigned(i_reg_187) + unsigned(ap_const_lv10_1));
    icmp1_fu_283_p2 <= "0" when (tmp_13_fu_273_p4 = ap_const_lv10_0) else "1";
    icmp_fu_237_p2 <= "0" when (tmp_1_fu_227_p4 = ap_const_lv9_0) else "1";

    img_in_data_stream_V_blk_n_assign_proc : process(img_in_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_4_reg_730, tmp_reg_706)
    begin
        if (((tmp_reg_706 = ap_const_lv1_1) and (tmp_4_reg_730 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_in_data_stream_V_blk_n <= img_in_data_stream_V_empty_n;
        else 
            img_in_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op64_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op64_read_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in_data_stream_V_read <= ap_const_logic_1;
        else 
            img_in_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_V_blk_n_assign_proc : process(img_out_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, or_cond6_reg_755_pp0_iter3_reg)
    begin
        if (((or_cond6_reg_755_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            img_out_data_stream_V_blk_n <= img_out_data_stream_V_full_n;
        else 
            img_out_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_V_din <= tmp_12_reg_779;

    img_out_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, or_cond6_reg_755_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond6_reg_755_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_out_data_stream_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond3_fu_209_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond3_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_255_p2 <= std_logic_vector(unsigned(col_assign_reg_198) + unsigned(ap_const_lv11_1));
    okno_val_0_0_fu_372_p3 <= 
        okno_val_0_0_1_fu_120 when (tmp_4_reg_730_pp0_iter1_reg(0) = '1') else 
        okno_val_0_0_s_fu_104;
    okno_val_1_0_1_fu_354_p1 <= tmp1_1_fu_100(8 - 1 downto 0);
    okno_val_1_0_fu_365_p3 <= 
        okno_val_1_0_1_fu_354_p1 when (tmp_4_reg_730_pp0_iter1_reg(0) = '1') else 
        okno_val_1_0_s_fu_112;
    okno_val_2_0_1_fu_350_p1 <= tmp2_1_fu_96(8 - 1 downto 0);
    okno_val_2_0_fu_358_p3 <= 
        okno_val_2_0_1_fu_350_p1 when (tmp_4_reg_730_pp0_iter1_reg(0) = '1') else 
        okno_val_2_0_s_fu_124;
    or_cond5_fu_541_p2 <= (tmp4_fu_537_p2 and tmp3_fu_533_p2);
    or_cond6_fu_295_p2 <= (tmp_s_fu_289_p2 and tmp_2_reg_716);
    p_shl1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_387_p3),14));
    p_shl2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_413_p3),14));
    p_shl3_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_439_p3),14));
    p_shl_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_469_p3),14));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_1_2_i_fu_451_p2 <= std_logic_vector(unsigned(p_shl3_fu_447_p1) - unsigned(rhs_V_1_2_i_cast_fu_435_p1));
    rhs_V_0_1_i_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_0_0_s_fu_104),14));
    rhs_V_1_2_i_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_1_1_s_fu_116),14));
    rhs_V_1_i_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_1_0_fu_365_p3),14));
    rhs_V_2_1_i_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(okno_val_2_0_s_fu_124),14));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_reg_774),16));
    tmp1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_val_0_q0),32));
    tmp2_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_val_1_q0),32));
    tmp3_fu_533_p2 <= (icmp_reg_711 and icmp1_reg_750_pp0_iter2_reg);
    tmp4_fu_537_p2 <= (tmp_reg_706 and tmp_4_reg_730_pp0_iter2_reg);
    tmp5_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_553_p2),16));
    tmp5_fu_553_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_547_p1) + unsigned(tmp7_cast_fu_550_p1));
    tmp6_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_reg_759),15));
    tmp7_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_reg_764),15));
    tmp8_fu_569_p2 <= std_logic_vector(unsigned(tmp9_cast_fu_563_p1) + unsigned(tmp10_cast_fu_566_p1));
    tmp9_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_reg_769),16));
    tmp_12_fu_591_p3 <= 
        v0_assign_fu_581_p4 when (or_cond5_fu_541_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_13_fu_273_p4 <= col_assign_reg_198(10 downto 1);
    tmp_14_fu_387_p3 <= (okno_val_0_0_s_fu_104 & ap_const_lv5_0);
    tmp_15_fu_413_p3 <= (okno_val_1_0_fu_365_p3 & ap_const_lv5_0);
    tmp_16_fu_439_p3 <= (okno_val_1_1_s_fu_116 & ap_const_lv5_0);
    tmp_17_fu_469_p3 <= (okno_val_2_0_s_fu_124 & ap_const_lv5_0);
    tmp_1_fu_227_p4 <= i_reg_187(9 downto 1);
    tmp_2_fu_243_p2 <= "0" when (i_reg_187 = ap_const_lv10_0) else "1";
    tmp_4_fu_261_p2 <= "1" when (unsigned(col_assign_reg_198) < unsigned(ap_const_lv11_500)) else "0";
    tmp_6_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_198),64));
    tmp_fu_221_p2 <= "1" when (unsigned(i_reg_187) < unsigned(ap_const_lv10_2D0)) else "0";
    tmp_s_fu_289_p2 <= "0" when (col_assign_reg_198 = ap_const_lv11_0) else "1";
    v0_assign_fu_581_p4 <= acc_V_2_2_i_fu_575_p2(15 downto 8);
end behav;
