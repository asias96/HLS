// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rozmycie (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_in_data_stream_V_dout,
        img_in_data_stream_V_empty_n,
        img_in_data_stream_V_read,
        img_out_data_stream_V_din,
        img_out_data_stream_V_full_n,
        img_out_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_in_data_stream_V_dout;
input   img_in_data_stream_V_empty_n;
output   img_in_data_stream_V_read;
output  [7:0] img_out_data_stream_V_din;
input   img_out_data_stream_V_full_n;
output   img_out_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_in_data_stream_V_read;
reg img_out_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [3:0] coeff_tab_V_address0;
reg    coeff_tab_V_ce0;
wire   [7:0] coeff_tab_V_q0;
reg   [3:0] coeff_tab_V_address1;
reg    coeff_tab_V_ce1;
wire   [7:0] coeff_tab_V_q1;
reg    img_in_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_783;
reg   [0:0] tmp_4_reg_813;
reg   [0:0] tmp_mid2_reg_798;
reg    img_out_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond6_reg_831;
reg   [0:0] or_cond6_reg_831_pp0_iter1_reg;
reg   [19:0] indvar_flatten_reg_229;
reg   [9:0] i_reg_240;
reg   [10:0] col_assign_reg_251;
reg  signed [7:0] reg_271;
reg    ap_predicate_op81_read_state3;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg  signed [7:0] reg_275;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] okno_val_0_2_load_reg_768;
reg   [7:0] okno_val_1_2_load_reg_773;
reg   [7:0] okno_val_2_2_load_reg_778;
wire   [0:0] exitcond_flatten_fu_289_p2;
wire   [19:0] indvar_flatten_next_fu_295_p2;
reg   [19:0] indvar_flatten_next_reg_787;
wire   [10:0] col_assign_mid2_fu_328_p3;
reg   [10:0] col_assign_mid2_reg_792;
wire   [0:0] tmp_mid2_fu_348_p3;
reg   [0:0] tmp_mid2_reg_798_pp0_iter1_reg;
wire   [0:0] tmp_1_mid2_fu_388_p3;
reg   [0:0] tmp_1_mid2_reg_803;
reg   [0:0] tmp_1_mid2_reg_803_pp0_iter1_reg;
wire   [9:0] i_mid2_fu_416_p3;
reg   [9:0] i_mid2_reg_808;
wire   [0:0] tmp_4_fu_424_p2;
reg   [0:0] tmp_4_reg_813_pp0_iter1_reg;
reg   [10:0] buffer_val_1_addr_reg_821;
reg   [10:0] buffer_val_0_addr_reg_826;
wire   [0:0] or_cond6_fu_442_p2;
reg   [7:0] coeff_tab_V_load_3_reg_835;
wire   [15:0] ret_V_2_2_i_fu_478_p2;
reg   [15:0] ret_V_2_2_i_reg_840;
wire  signed [15:0] grp_fu_676_p3;
reg  signed [15:0] tmp6_reg_845;
reg   [7:0] okno_val_1_1_load_1_reg_850;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [7:0] okno_val_2_1_load_1_reg_855;
wire   [7:0] okno_val_2_0_fu_535_p3;
reg   [7:0] okno_val_2_0_reg_860;
wire   [7:0] okno_val_1_0_fu_542_p3;
reg   [7:0] okno_val_1_0_reg_865;
wire   [0:0] icmp_fu_558_p2;
reg   [0:0] icmp_reg_870;
reg   [0:0] icmp_reg_870_pp0_iter1_reg;
wire   [15:0] ret_V_1_2_i_fu_571_p2;
reg   [15:0] ret_V_1_2_i_reg_875;
reg  signed [7:0] coeff_tab_V_load_6_reg_880;
wire   [10:0] j_fu_587_p2;
reg   [10:0] j_reg_885;
wire  signed [15:0] grp_fu_684_p3;
reg  signed [15:0] tmp7_reg_890;
(* use_dsp48 = "no" *) wire   [15:0] tmp5_fu_618_p2;
reg   [15:0] tmp5_reg_895;
wire  signed [15:0] grp_fu_692_p3;
reg  signed [15:0] tmp11_reg_900;
wire  signed [15:0] grp_fu_699_p3;
reg  signed [15:0] tmp9_reg_905;
wire   [15:0] acc_V_2_2_i_fu_639_p2;
reg   [15:0] acc_V_2_2_i_reg_910;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
reg   [10:0] buffer_val_0_address0;
reg    buffer_val_0_ce0;
reg    buffer_val_0_we0;
wire   [7:0] buffer_val_0_q0;
reg   [10:0] buffer_val_1_address0;
reg    buffer_val_1_ce0;
reg    buffer_val_1_we0;
wire   [7:0] buffer_val_1_q0;
reg   [19:0] ap_phi_mux_indvar_flatten_phi_fu_233_p4;
reg   [9:0] ap_phi_mux_i_phi_fu_244_p4;
reg   [10:0] ap_phi_mux_col_assign_phi_fu_255_p4;
wire   [63:0] tmp_6_fu_430_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] okno_val_0_1_fu_128;
wire   [7:0] okno_val_0_0_fu_487_p3;
wire    ap_block_pp0_stage3;
reg   [7:0] okno_val_0_2_fu_132;
reg   [7:0] okno_val_1_1_fu_136;
wire    ap_block_pp0_stage4;
reg   [7:0] okno_val_1_2_fu_140;
reg   [7:0] okno_val_2_1_fu_144;
reg   [7:0] okno_val_2_2_fu_148;
reg   [7:0] okno_val_0_0_1_fu_152;
reg   [31:0] tmp2_1_fu_156;
wire   [31:0] tmp2_fu_452_p1;
reg   [31:0] tmp1_1_fu_160;
wire   [31:0] tmp1_fu_448_p1;
wire    ap_block_pp0_stage2;
wire   [0:0] exitcond_fu_322_p2;
wire   [9:0] i_1_fu_316_p2;
wire   [0:0] tmp_mid1_fu_336_p2;
wire   [0:0] tmp_fu_342_p2;
wire   [8:0] tmp_1_fu_356_p4;
wire   [8:0] tmp_2_fu_372_p4;
wire   [0:0] icmp1_fu_366_p2;
wire   [0:0] icmp2_fu_382_p2;
wire   [0:0] tmp_2_mid1_fu_396_p2;
wire   [0:0] tmp_s_fu_402_p2;
wire   [0:0] tmp_2_mid2_fu_408_p3;
wire   [0:0] tmp_8_fu_436_p2;
wire   [7:0] ret_V_2_2_i_fu_478_p0;
wire  signed [7:0] ret_V_2_2_i_fu_478_p1;
wire   [7:0] ret_V_0_i_fu_502_p0;
wire  signed [7:0] ret_V_0_i_fu_502_p1;
wire   [7:0] okno_val_2_0_1_fu_527_p1;
wire   [7:0] okno_val_1_0_1_fu_531_p1;
wire   [9:0] tmp_12_fu_549_p4;
wire   [7:0] ret_V_1_2_i_fu_571_p0;
wire  signed [7:0] ret_V_1_2_i_fu_571_p1;
wire   [7:0] ret_V_1_i_fu_605_p0;
wire  signed [7:0] ret_V_1_i_fu_605_p1;
wire  signed [15:0] grp_fu_706_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp8_fu_635_p2;
wire   [0:0] tmp4_fu_648_p2;
wire   [0:0] tmp3_fu_644_p2;
wire   [0:0] or_cond5_fu_652_p2;
wire   [7:0] v0_assign_fu_658_p4;
wire   [7:0] grp_fu_676_p0;
wire   [15:0] grp_fu_676_p2;
wire   [7:0] grp_fu_684_p0;
wire   [15:0] grp_fu_684_p2;
wire   [7:0] grp_fu_692_p0;
wire   [7:0] grp_fu_699_p0;
wire   [7:0] grp_fu_706_p0;
wire    ap_CS_fsm_state13;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0;
reg    ap_predicate_op63_load_state2;
reg    ap_enable_operation_63;
reg    ap_enable_state2_pp0_iter0_stage0;
reg    ap_predicate_op71_load_state3;
reg    ap_enable_operation_71;
reg    ap_enable_state3_pp0_iter0_stage1;
reg    ap_predicate_op73_store_state3;
reg    ap_enable_operation_73;
reg    ap_predicate_op65_load_state2;
reg    ap_enable_operation_65;
reg    ap_predicate_op72_load_state3;
reg    ap_enable_operation_72;
reg    ap_predicate_op83_store_state3;
reg    ap_enable_operation_83;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_676_p00;
wire   [15:0] grp_fu_684_p00;
wire   [15:0] grp_fu_692_p00;
wire   [15:0] grp_fu_699_p00;
wire   [15:0] grp_fu_706_p00;
wire   [15:0] ret_V_0_i_fu_502_p00;
wire   [15:0] ret_V_1_2_i_fu_571_p00;
wire   [15:0] ret_V_1_i_fu_605_p00;
wire   [15:0] ret_V_2_2_i_fu_478_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

rozmycie_coeff_tab_V #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
coeff_tab_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab_V_address0),
    .ce0(coeff_tab_V_ce0),
    .q0(coeff_tab_V_q0),
    .address1(coeff_tab_V_address1),
    .ce1(coeff_tab_V_ce1),
    .q1(coeff_tab_V_q1)
);

rozmycie_buffer_val_0 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
buffer_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_val_0_address0),
    .ce0(buffer_val_0_ce0),
    .we0(buffer_val_0_we0),
    .d0(img_in_data_stream_V_dout),
    .q0(buffer_val_0_q0)
);

rozmycie_buffer_val_0 #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
buffer_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_val_1_address0),
    .ce0(buffer_val_1_ce0),
    .we0(buffer_val_1_we0),
    .d0(buffer_val_0_q0),
    .q0(buffer_val_1_q0)
);

filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1_U9(
    .din0(grp_fu_676_p0),
    .din1(reg_275),
    .din2(grp_fu_676_p2),
    .dout(grp_fu_676_p3)
);

filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1_U10(
    .din0(grp_fu_684_p0),
    .din1(reg_271),
    .din2(grp_fu_684_p2),
    .dout(grp_fu_684_p3)
);

filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1_U11(
    .din0(grp_fu_692_p0),
    .din1(reg_271),
    .din2(ret_V_2_2_i_reg_840),
    .dout(grp_fu_692_p3)
);

filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filtr_Gauss_mac_muladd_8ns_8s_16ns_16_1_1_U12(
    .din0(grp_fu_699_p0),
    .din1(reg_275),
    .din2(ret_V_1_2_i_reg_875),
    .dout(grp_fu_699_p3)
);

filtr_Gauss_mac_muladd_8ns_8s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
filtr_Gauss_mac_muladd_8ns_8s_16s_16_1_1_U13(
    .din0(grp_fu_706_p0),
    .din1(coeff_tab_V_load_6_reg_880),
    .din2(tmp11_reg_900),
    .dout(grp_fu_706_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_251 <= j_reg_885;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_251 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_240 <= i_mid2_reg_808;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_240 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_229 <= indvar_flatten_next_reg_787;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_229 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_275 <= coeff_tab_V_q1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            reg_275 <= coeff_tab_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        acc_V_2_2_i_reg_910 <= acc_V_2_2_i_fu_639_p2;
        icmp_reg_870_pp0_iter1_reg <= icmp_reg_870;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_424_p2 == 1'd1) & (exitcond_flatten_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_0_addr_reg_826 <= tmp_6_fu_430_p1;
        buffer_val_1_addr_reg_821 <= tmp_6_fu_430_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        coeff_tab_V_load_3_reg_835 <= coeff_tab_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        coeff_tab_V_load_6_reg_880 <= coeff_tab_V_q1;
        j_reg_885 <= j_fu_587_p2;
        okno_val_1_1_fu_136 <= okno_val_1_0_fu_542_p3;
        okno_val_1_1_load_1_reg_850 <= okno_val_1_1_fu_136;
        okno_val_2_1_fu_144 <= okno_val_2_0_fu_535_p3;
        okno_val_2_1_load_1_reg_855 <= okno_val_2_1_fu_144;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_mid2_reg_792 <= col_assign_mid2_fu_328_p3;
        or_cond6_reg_831 <= or_cond6_fu_442_p2;
        tmp_1_mid2_reg_803 <= tmp_1_mid2_fu_388_p3;
        tmp_4_reg_813 <= tmp_4_fu_424_p2;
        tmp_mid2_reg_798 <= tmp_mid2_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_783 <= exitcond_flatten_fu_289_p2;
        okno_val_0_2_load_reg_768 <= okno_val_0_2_fu_132;
        okno_val_1_2_load_reg_773 <= okno_val_1_2_fu_140;
        okno_val_2_2_load_reg_778 <= okno_val_2_2_fu_148;
        or_cond6_reg_831_pp0_iter1_reg <= or_cond6_reg_831;
        tmp_1_mid2_reg_803_pp0_iter1_reg <= tmp_1_mid2_reg_803;
        tmp_4_reg_813_pp0_iter1_reg <= tmp_4_reg_813;
        tmp_mid2_reg_798_pp0_iter1_reg <= tmp_mid2_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_mid2_reg_808 <= i_mid2_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        icmp_reg_870 <= icmp_fu_558_p2;
        okno_val_1_0_reg_865 <= okno_val_1_0_fu_542_p3;
        okno_val_2_0_reg_860 <= okno_val_2_0_fu_535_p3;
        ret_V_1_2_i_reg_875 <= ret_V_1_2_i_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_787 <= indvar_flatten_next_fu_295_p2;
        okno_val_0_2_fu_132 <= okno_val_0_1_fu_128;
        okno_val_1_2_fu_140 <= okno_val_1_1_fu_136;
        okno_val_2_2_fu_148 <= okno_val_2_1_fu_144;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_mid2_reg_798 == 1'd1) & (tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        okno_val_0_0_1_fu_152 <= img_in_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        okno_val_0_1_fu_128 <= okno_val_0_0_fu_487_p3;
        tmp6_reg_845 <= grp_fu_676_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_271 <= coeff_tab_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ret_V_2_2_i_reg_840 <= ret_V_2_2_i_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp11_reg_900 <= grp_fu_692_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp1_1_fu_160[7 : 0] <= tmp1_fu_448_p1[7 : 0];
        tmp2_1_fu_156[7 : 0] <= tmp2_fu_452_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp5_reg_895 <= tmp5_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp7_reg_890 <= grp_fu_684_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp9_reg_905 <= grp_fu_699_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_289_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_assign_phi_fu_255_p4 = j_reg_885;
    end else begin
        ap_phi_mux_col_assign_phi_fu_255_p4 = col_assign_reg_251;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_244_p4 = i_mid2_reg_808;
    end else begin
        ap_phi_mux_i_phi_fu_244_p4 = i_reg_240;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_783 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_233_p4 = indvar_flatten_next_reg_787;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_233_p4 = indvar_flatten_reg_229;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            buffer_val_0_address0 = buffer_val_0_addr_reg_826;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            buffer_val_0_address0 = tmp_6_fu_430_p1;
        end else begin
            buffer_val_0_address0 = 'bx;
        end
    end else begin
        buffer_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        buffer_val_0_ce0 = 1'b1;
    end else begin
        buffer_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_mid2_reg_798 == 1'd1) & (tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        buffer_val_0_we0 = 1'b1;
    end else begin
        buffer_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            buffer_val_1_address0 = buffer_val_1_addr_reg_821;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            buffer_val_1_address0 = tmp_6_fu_430_p1;
        end else begin
            buffer_val_1_address0 = 'bx;
        end
    end else begin
        buffer_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        buffer_val_1_ce0 = 1'b1;
    end else begin
        buffer_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        buffer_val_1_we0 = 1'b1;
    end else begin
        buffer_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            coeff_tab_V_address0 = 4'd7;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            coeff_tab_V_address0 = 4'd5;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            coeff_tab_V_address0 = 4'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            coeff_tab_V_address0 = 4'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            coeff_tab_V_address0 = 4'd0;
        end else begin
            coeff_tab_V_address0 = 'bx;
        end
    end else begin
        coeff_tab_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            coeff_tab_V_address1 = 4'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            coeff_tab_V_address1 = 4'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            coeff_tab_V_address1 = 4'd8;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            coeff_tab_V_address1 = 4'd3;
        end else begin
            coeff_tab_V_address1 = 'bx;
        end
    end else begin
        coeff_tab_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        coeff_tab_V_ce0 = 1'b1;
    end else begin
        coeff_tab_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        coeff_tab_V_ce1 = 1'b1;
    end else begin
        coeff_tab_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_mid2_reg_798 == 1'd1) & (tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_in_data_stream_V_blk_n = img_in_data_stream_V_empty_n;
    end else begin
        img_in_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op81_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        img_in_data_stream_V_read = 1'b1;
    end else begin
        img_in_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_cond6_reg_831_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_out_data_stream_V_blk_n = img_out_data_stream_V_full_n;
    end else begin
        img_out_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond6_reg_831_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_V_write = 1'b1;
    end else begin
        img_out_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond_flatten_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_2_2_i_fu_639_p2 = (tmp5_reg_895 + tmp8_fu_635_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)) | ((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage4 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage4_subdone)) | ((ap_ST_fsm_pp0_stage2 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage2_subdone)) | ((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage3_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((or_cond6_reg_831_pp0_iter1_reg == 1'd1) & (img_out_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((or_cond6_reg_831_pp0_iter1_reg == 1'd1) & (img_out_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((or_cond6_reg_831_pp0_iter1_reg == 1'd1) & (img_out_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((img_in_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op81_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((img_in_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op81_read_state3 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter2 = ((or_cond6_reg_831_pp0_iter1_reg == 1'd1) & (img_out_data_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((img_in_data_stream_V_empty_n == 1'b0) & (ap_predicate_op81_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_63 = (ap_predicate_op63_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_65 = (ap_predicate_op65_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_71 = (ap_predicate_op71_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_72 = (ap_predicate_op72_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_73 = (ap_predicate_op73_store_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_83 = (ap_predicate_op83_store_state3 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_predicate_op63_load_state2 = ((tmp_4_fu_424_p2 == 1'd1) & (exitcond_flatten_fu_289_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op65_load_state2 = ((tmp_4_fu_424_p2 == 1'd1) & (exitcond_flatten_fu_289_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op71_load_state3 = ((tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0));
end

always @ (*) begin
    ap_predicate_op72_load_state3 = ((tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0));
end

always @ (*) begin
    ap_predicate_op73_store_state3 = ((tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0));
end

always @ (*) begin
    ap_predicate_op81_read_state3 = ((tmp_mid2_reg_798 == 1'd1) & (tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0));
end

always @ (*) begin
    ap_predicate_op83_store_state3 = ((tmp_mid2_reg_798 == 1'd1) & (tmp_4_reg_813 == 1'd1) & (exitcond_flatten_reg_783 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign col_assign_mid2_fu_328_p3 = ((exitcond_fu_322_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_col_assign_phi_fu_255_p4);

assign exitcond_flatten_fu_289_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_233_p4 == 20'd923601) ? 1'b1 : 1'b0);

assign exitcond_fu_322_p2 = ((ap_phi_mux_col_assign_phi_fu_255_p4 == 11'd1281) ? 1'b1 : 1'b0);

assign grp_fu_676_p0 = grp_fu_676_p00;

assign grp_fu_676_p00 = okno_val_0_1_fu_128;

assign grp_fu_676_p2 = ($signed({{1'b0}, {ret_V_0_i_fu_502_p0}}) * $signed(ret_V_0_i_fu_502_p1));

assign grp_fu_684_p0 = grp_fu_684_p00;

assign grp_fu_684_p00 = okno_val_0_2_load_reg_768;

assign grp_fu_684_p2 = ($signed({{1'b0}, {ret_V_1_i_fu_605_p0}}) * $signed(ret_V_1_i_fu_605_p1));

assign grp_fu_692_p0 = grp_fu_692_p00;

assign grp_fu_692_p00 = okno_val_2_1_load_1_reg_855;

assign grp_fu_699_p0 = grp_fu_699_p00;

assign grp_fu_699_p00 = okno_val_1_1_load_1_reg_850;

assign grp_fu_706_p0 = grp_fu_706_p00;

assign grp_fu_706_p00 = okno_val_2_0_reg_860;

assign i_1_fu_316_p2 = (ap_phi_mux_i_phi_fu_244_p4 + 10'd1);

assign i_mid2_fu_416_p3 = ((exitcond_fu_322_p2[0:0] === 1'b1) ? i_1_fu_316_p2 : ap_phi_mux_i_phi_fu_244_p4);

assign icmp1_fu_366_p2 = ((tmp_1_fu_356_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_382_p2 = ((tmp_2_fu_372_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_fu_558_p2 = ((tmp_12_fu_549_p4 != 10'd0) ? 1'b1 : 1'b0);

assign img_out_data_stream_V_din = ((or_cond5_fu_652_p2[0:0] === 1'b1) ? v0_assign_fu_658_p4 : 8'd0);

assign indvar_flatten_next_fu_295_p2 = (ap_phi_mux_indvar_flatten_phi_fu_233_p4 + 20'd1);

assign j_fu_587_p2 = (col_assign_mid2_reg_792 + 11'd1);

assign okno_val_0_0_fu_487_p3 = ((tmp_4_reg_813[0:0] === 1'b1) ? okno_val_0_0_1_fu_152 : okno_val_0_1_fu_128);

assign okno_val_1_0_1_fu_531_p1 = tmp1_1_fu_160[7:0];

assign okno_val_1_0_fu_542_p3 = ((tmp_4_reg_813[0:0] === 1'b1) ? okno_val_1_0_1_fu_531_p1 : okno_val_1_1_fu_136);

assign okno_val_2_0_1_fu_527_p1 = tmp2_1_fu_156[7:0];

assign okno_val_2_0_fu_535_p3 = ((tmp_4_reg_813[0:0] === 1'b1) ? okno_val_2_0_1_fu_527_p1 : okno_val_2_1_fu_144);

assign or_cond5_fu_652_p2 = (tmp4_fu_648_p2 & tmp3_fu_644_p2);

assign or_cond6_fu_442_p2 = (tmp_8_fu_436_p2 & tmp_2_mid2_fu_408_p3);

assign ret_V_0_i_fu_502_p0 = ret_V_0_i_fu_502_p00;

assign ret_V_0_i_fu_502_p00 = okno_val_0_0_fu_487_p3;

assign ret_V_0_i_fu_502_p1 = reg_271;

assign ret_V_1_2_i_fu_571_p0 = ret_V_1_2_i_fu_571_p00;

assign ret_V_1_2_i_fu_571_p00 = okno_val_1_2_load_reg_773;

assign ret_V_1_2_i_fu_571_p1 = coeff_tab_V_q0;

assign ret_V_1_2_i_fu_571_p2 = ($signed({{1'b0}, {ret_V_1_2_i_fu_571_p0}}) * $signed(ret_V_1_2_i_fu_571_p1));

assign ret_V_1_i_fu_605_p0 = ret_V_1_i_fu_605_p00;

assign ret_V_1_i_fu_605_p00 = okno_val_1_0_reg_865;

assign ret_V_1_i_fu_605_p1 = coeff_tab_V_load_3_reg_835;

assign ret_V_2_2_i_fu_478_p0 = ret_V_2_2_i_fu_478_p00;

assign ret_V_2_2_i_fu_478_p00 = okno_val_2_2_load_reg_778;

assign ret_V_2_2_i_fu_478_p1 = coeff_tab_V_q1;

assign ret_V_2_2_i_fu_478_p2 = ($signed({{1'b0}, {ret_V_2_2_i_fu_478_p0}}) * $signed(ret_V_2_2_i_fu_478_p1));

assign start_out = real_start;

assign tmp1_fu_448_p1 = buffer_val_0_q0;

assign tmp2_fu_452_p1 = buffer_val_1_q0;

assign tmp3_fu_644_p2 = (tmp_1_mid2_reg_803_pp0_iter1_reg & icmp_reg_870_pp0_iter1_reg);

assign tmp4_fu_648_p2 = (tmp_mid2_reg_798_pp0_iter1_reg & tmp_4_reg_813_pp0_iter1_reg);

assign tmp5_fu_618_p2 = ($signed(tmp6_reg_845) + $signed(tmp7_reg_890));

assign tmp8_fu_635_p2 = ($signed(tmp9_reg_905) + $signed(grp_fu_706_p3));

assign tmp_12_fu_549_p4 = {{col_assign_mid2_reg_792[10:1]}};

assign tmp_1_fu_356_p4 = {{i_1_fu_316_p2[9:1]}};

assign tmp_1_mid2_fu_388_p3 = ((exitcond_fu_322_p2[0:0] === 1'b1) ? icmp1_fu_366_p2 : icmp2_fu_382_p2);

assign tmp_2_fu_372_p4 = {{ap_phi_mux_i_phi_fu_244_p4[9:1]}};

assign tmp_2_mid1_fu_396_p2 = ((i_1_fu_316_p2 != 10'd0) ? 1'b1 : 1'b0);

assign tmp_2_mid2_fu_408_p3 = ((exitcond_fu_322_p2[0:0] === 1'b1) ? tmp_2_mid1_fu_396_p2 : tmp_s_fu_402_p2);

assign tmp_4_fu_424_p2 = ((col_assign_mid2_fu_328_p3 < 11'd1280) ? 1'b1 : 1'b0);

assign tmp_6_fu_430_p1 = col_assign_mid2_fu_328_p3;

assign tmp_8_fu_436_p2 = ((col_assign_mid2_fu_328_p3 != 11'd0) ? 1'b1 : 1'b0);

assign tmp_fu_342_p2 = ((ap_phi_mux_i_phi_fu_244_p4 < 10'd720) ? 1'b1 : 1'b0);

assign tmp_mid1_fu_336_p2 = ((i_1_fu_316_p2 < 10'd720) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_348_p3 = ((exitcond_fu_322_p2[0:0] === 1'b1) ? tmp_mid1_fu_336_p2 : tmp_fu_342_p2);

assign tmp_s_fu_402_p2 = ((ap_phi_mux_i_phi_fu_244_p4 != 10'd0) ? 1'b1 : 1'b0);

assign v0_assign_fu_658_p4 = {{acc_V_2_2_i_reg_910[15:8]}};

always @ (posedge ap_clk) begin
    tmp2_1_fu_156[31:8] <= 24'b000000000000000000000000;
    tmp1_1_fu_160[31:8] <= 24'b000000000000000000000000;
end

endmodule //rozmycie
