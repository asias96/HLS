// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.604000,HLS_SYN_LAT=180,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1606,HLS_SYN_LUT=2668,HLS_VERSION=2018_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        probe_in,
        out_r,
        out_r_ap_vld,
        coeff_address0,
        coeff_ce0,
        coeff_q0
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] probe_in;
output  [63:0] out_r;
output   out_r_ap_vld;
output  [3:0] coeff_address0;
output   coeff_ce0;
input  [31:0] coeff_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;
reg[3:0] coeff_address0;
reg coeff_ce0;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] data_in_address0;
reg    data_in_ce0;
reg    data_in_we0;
reg   [63:0] data_in_d0;
wire   [63:0] data_in_q0;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_128_p1;
reg   [63:0] reg_137;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_124_p2;
reg   [63:0] reg_143;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state31;
wire   [3:0] i_1_fu_154_p2;
reg   [3:0] i_1_reg_184;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_148_p2;
wire   [63:0] tmp_3_fu_165_p1;
reg   [63:0] tmp_3_reg_194;
reg   [63:0] data_in_load_reg_204;
wire   [63:0] grp_fu_118_p2;
wire    ap_CS_fsm_state19;
reg   [63:0] acc_reg_95;
reg   [3:0] i_reg_107;
wire   [63:0] tmp_2_fu_160_p1;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state32;
reg   [63:0] grp_fu_124_p0;
reg   [63:0] grp_fu_124_p1;
wire    ap_CS_fsm_state9;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

fir_data_in #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
data_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_in_address0),
    .ce0(data_in_ce0),
    .we0(data_in_we0),
    .d0(data_in_d0),
    .q0(data_in_q0)
);

fir_dadd_64ns_64nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dadd_64ns_64nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_reg_95),
    .din1(reg_143),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

fir_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dmul_64ns_64ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .din1(grp_fu_124_p1),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

fir_sitodp_32ns_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fir_sitodp_32ns_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(coeff_q0),
    .ce(1'b1),
    .dout(grp_fu_128_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_reg_95 <= grp_fu_118_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        acc_reg_95 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_107 <= i_1_reg_184;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_107 <= 4'd9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in_load_reg_204 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_148_p2 == 1'd0))) begin
        i_1_reg_184 <= i_1_fu_154_p2;
        tmp_3_reg_194[3 : 0] <= tmp_3_fu_165_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_137 <= grp_fu_128_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_143 <= grp_fu_124_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((tmp_fu_148_p2 == 1'd1)) begin
            coeff_address0 = 64'd0;
        end else if ((tmp_fu_148_p2 == 1'd0)) begin
            coeff_address0 = tmp_3_fu_165_p1;
        end else begin
            coeff_address0 = 'bx;
        end
    end else begin
        coeff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_fu_148_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_148_p2 == 1'd0)))) begin
        coeff_ce0 = 1'b1;
    end else begin
        coeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        data_in_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in_address0 = tmp_3_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_address0 = tmp_2_fu_160_p1;
    end else begin
        data_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state2))) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        data_in_d0 = probe_in;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in_d0 = data_in_q0;
    end else begin
        data_in_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state26))) begin
        data_in_we0 = 1'b1;
    end else begin
        data_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_124_p0 = reg_137;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_124_p0 = data_in_load_reg_204;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_124_p1 = probe_in;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_124_p1 = reg_137;
    end else begin
        grp_fu_124_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_148_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_1_fu_154_p2 = ($signed(i_reg_107) + $signed(4'd15));

assign out_r = grp_fu_118_p2;

assign tmp_2_fu_160_p1 = i_1_fu_154_p2;

assign tmp_3_fu_165_p1 = i_reg_107;

assign tmp_fu_148_p2 = ((i_reg_107 == 4'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_3_reg_194[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
