// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<36> fir::ap_ST_fsm_state1 = "1";
const sc_lv<36> fir::ap_ST_fsm_state2 = "10";
const sc_lv<36> fir::ap_ST_fsm_state3 = "100";
const sc_lv<36> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<36> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<36> fir::ap_ST_fsm_state6 = "100000";
const sc_lv<36> fir::ap_ST_fsm_state7 = "1000000";
const sc_lv<36> fir::ap_ST_fsm_state8 = "10000000";
const sc_lv<36> fir::ap_ST_fsm_state9 = "100000000";
const sc_lv<36> fir::ap_ST_fsm_state10 = "1000000000";
const sc_lv<36> fir::ap_ST_fsm_state11 = "10000000000";
const sc_lv<36> fir::ap_ST_fsm_state12 = "100000000000";
const sc_lv<36> fir::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<36> fir::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<36> fir::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<36> fir::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<36> fir::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_13 = "10011";
const sc_lv<32> fir::ap_const_lv32_7 = "111";
const sc_lv<32> fir::ap_const_lv32_18 = "11000";
const sc_lv<32> fir::ap_const_lv32_D = "1101";
const sc_lv<32> fir::ap_const_lv32_1E = "11110";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_12 = "10010";
const sc_lv<64> fir::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> fir::ap_const_lv4_9 = "1001";
const sc_lv<32> fir::ap_const_lv32_23 = "100011";
const sc_lv<32> fir::ap_const_lv32_19 = "11001";
const sc_lv<4> fir::ap_const_lv4_0 = "0000";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<32> fir::ap_const_lv32_E = "1110";
const sc_lv<32> fir::ap_const_lv32_1F = "11111";
const sc_lv<32> fir::ap_const_lv32_8 = "1000";
const sc_lv<4> fir::ap_const_lv4_F = "1111";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    data_in_U = new fir_data_in("data_in_U");
    data_in_U->clk(ap_clk);
    data_in_U->reset(ap_rst);
    data_in_U->address0(data_in_address0);
    data_in_U->ce0(data_in_ce0);
    data_in_U->we0(data_in_we0);
    data_in_U->d0(data_in_d0);
    data_in_U->q0(data_in_q0);
    fir_dadd_64ns_64nbkb_U1 = new fir_dadd_64ns_64nbkb<1,5,64,64,64>("fir_dadd_64ns_64nbkb_U1");
    fir_dadd_64ns_64nbkb_U1->clk(ap_clk);
    fir_dadd_64ns_64nbkb_U1->reset(ap_rst);
    fir_dadd_64ns_64nbkb_U1->din0(acc_reg_95);
    fir_dadd_64ns_64nbkb_U1->din1(reg_143);
    fir_dadd_64ns_64nbkb_U1->ce(ap_var_for_const0);
    fir_dadd_64ns_64nbkb_U1->dout(grp_fu_118_p2);
    fir_dmul_64ns_64ncud_U2 = new fir_dmul_64ns_64ncud<1,6,64,64,64>("fir_dmul_64ns_64ncud_U2");
    fir_dmul_64ns_64ncud_U2->clk(ap_clk);
    fir_dmul_64ns_64ncud_U2->reset(ap_rst);
    fir_dmul_64ns_64ncud_U2->din0(grp_fu_124_p0);
    fir_dmul_64ns_64ncud_U2->din1(grp_fu_124_p1);
    fir_dmul_64ns_64ncud_U2->ce(ap_var_for_const0);
    fir_dmul_64ns_64ncud_U2->dout(grp_fu_124_p2);
    fir_sitodp_32ns_6dEe_U3 = new fir_sitodp_32ns_6dEe<1,6,32,64>("fir_sitodp_32ns_6dEe_U3");
    fir_sitodp_32ns_6dEe_U3->clk(ap_clk);
    fir_sitodp_32ns_6dEe_U3->reset(ap_rst);
    fir_sitodp_32ns_6dEe_U3->din0(coeff_q0);
    fir_sitodp_32ns_6dEe_U3->ce(ap_var_for_const0);
    fir_sitodp_32ns_6dEe_U3->dout(grp_fu_128_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_coeff_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_148_p2 );
    sensitive << ( tmp_3_fu_165_p1 );

    SC_METHOD(thread_coeff_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_148_p2 );

    SC_METHOD(thread_data_in_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_reg_194 );
    sensitive << ( tmp_2_fu_160_p1 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_data_in_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_data_in_d0);
    sensitive << ( probe_in );
    sensitive << ( data_in_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_data_in_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_grp_fu_124_p0);
    sensitive << ( reg_137 );
    sensitive << ( data_in_load_reg_204 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_124_p1);
    sensitive << ( probe_in );
    sensitive << ( reg_137 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_i_1_fu_154_p2);
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_out_r);
    sensitive << ( grp_fu_118_p2 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_tmp_2_fu_160_p1);
    sensitive << ( i_1_fu_154_p2 );

    SC_METHOD(thread_tmp_3_fu_165_p1);
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_tmp_fu_148_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_148_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, probe_in, "(port)probe_in");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
    sc_trace(mVcdFile, coeff_address0, "(port)coeff_address0");
    sc_trace(mVcdFile, coeff_ce0, "(port)coeff_ce0");
    sc_trace(mVcdFile, coeff_q0, "(port)coeff_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, data_in_address0, "data_in_address0");
    sc_trace(mVcdFile, data_in_ce0, "data_in_ce0");
    sc_trace(mVcdFile, data_in_we0, "data_in_we0");
    sc_trace(mVcdFile, data_in_d0, "data_in_d0");
    sc_trace(mVcdFile, data_in_q0, "data_in_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_128_p1, "grp_fu_128_p1");
    sc_trace(mVcdFile, reg_137, "reg_137");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, grp_fu_124_p2, "grp_fu_124_p2");
    sc_trace(mVcdFile, reg_143, "reg_143");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, i_1_fu_154_p2, "i_1_fu_154_p2");
    sc_trace(mVcdFile, i_1_reg_184, "i_1_reg_184");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_148_p2, "tmp_fu_148_p2");
    sc_trace(mVcdFile, tmp_3_fu_165_p1, "tmp_3_fu_165_p1");
    sc_trace(mVcdFile, tmp_3_reg_194, "tmp_3_reg_194");
    sc_trace(mVcdFile, data_in_load_reg_204, "data_in_load_reg_204");
    sc_trace(mVcdFile, grp_fu_118_p2, "grp_fu_118_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, acc_reg_95, "acc_reg_95");
    sc_trace(mVcdFile, i_reg_107, "i_reg_107");
    sc_trace(mVcdFile, tmp_2_fu_160_p1, "tmp_2_fu_160_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, grp_fu_124_p0, "grp_fu_124_p0");
    sc_trace(mVcdFile, grp_fu_124_p1, "grp_fu_124_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete data_in_U;
    delete fir_dadd_64ns_64nbkb_U1;
    delete fir_dmul_64ns_64ncud_U2;
    delete fir_sitodp_32ns_6dEe_U3;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        acc_reg_95 = grp_fu_118_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        acc_reg_95 = ap_const_lv64_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_reg_107 = i_1_reg_184.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_107 = ap_const_lv4_9;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_in_load_reg_204 = data_in_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_148_p2.read(), ap_const_lv1_0))) {
        i_1_reg_184 = i_1_fu_154_p2.read();
        tmp_3_reg_194 = tmp_3_fu_165_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        reg_137 = grp_fu_128_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        reg_143 = grp_fu_124_p2.read();
    }
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fir::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fir::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void fir::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void fir::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fir::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void fir::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void fir::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fir::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_coeff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(tmp_fu_148_p2.read(), ap_const_lv1_1)) {
            coeff_address0 =  (sc_lv<4>) (ap_const_lv64_0);
        } else if (esl_seteq<1,1,1>(tmp_fu_148_p2.read(), ap_const_lv1_0)) {
            coeff_address0 =  (sc_lv<4>) (tmp_3_fu_165_p1.read());
        } else {
            coeff_address0 = "XXXX";
        }
    } else {
        coeff_address0 = "XXXX";
    }
}

void fir::thread_coeff_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_148_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_148_p2.read(), ap_const_lv1_1)))) {
        coeff_ce0 = ap_const_logic_1;
    } else {
        coeff_ce0 = ap_const_logic_0;
    }
}

void fir::thread_data_in_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        data_in_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_in_address0 =  (sc_lv<4>) (tmp_3_reg_194.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_in_address0 =  (sc_lv<4>) (tmp_2_fu_160_p1.read());
    } else {
        data_in_address0 = "XXXX";
    }
}

void fir::thread_data_in_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        data_in_ce0 = ap_const_logic_1;
    } else {
        data_in_ce0 = ap_const_logic_0;
    }
}

void fir::thread_data_in_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        data_in_d0 = probe_in.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_in_d0 = data_in_q0.read();
    } else {
        data_in_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_data_in_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        data_in_we0 = ap_const_logic_1;
    } else {
        data_in_we0 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_124_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        grp_fu_124_p0 = reg_137.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_124_p0 = data_in_load_reg_204.read();
    } else {
        grp_fu_124_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_grp_fu_124_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        grp_fu_124_p1 = probe_in.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_124_p1 = reg_137.read();
    } else {
        grp_fu_124_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_i_1_fu_154_p2() {
    i_1_fu_154_p2 = (!i_reg_107.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_107.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void fir::thread_out_r() {
    out_r = grp_fu_118_p2.read();
}

void fir::thread_out_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_tmp_2_fu_160_p1() {
    tmp_2_fu_160_p1 = esl_zext<64,4>(i_1_fu_154_p2.read());
}

void fir::thread_tmp_3_fu_165_p1() {
    tmp_3_fu_165_p1 = esl_zext<64,4>(i_reg_107.read());
}

void fir::thread_tmp_fu_148_p2() {
    tmp_fu_148_p2 = (!i_reg_107.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_107.read() == ap_const_lv4_0);
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_148_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<36>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"probe_in\" :  \"" << probe_in.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeff_address0\" :  \"" << coeff_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeff_ce0\" :  \"" << coeff_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_q0\" :  \"" << coeff_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

