// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=190,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=2149,HLS_SYN_LUT=2761,HLS_VERSION=2018_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        probe_in,
        probe_in_ap_vld,
        out_r,
        out_r_ap_vld,
        coeff_address0,
        coeff_ce0,
        coeff_q0
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] probe_in;
input   probe_in_ap_vld;
output  [63:0] out_r;
output   out_r_ap_vld;
output  [3:0] coeff_address0;
output   coeff_ce0;
input  [31:0] coeff_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;
reg[3:0] coeff_address0;
reg coeff_ce0;

(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] probe_in_preg;
reg   [63:0] probe_in_in_sig;
reg    probe_in_ap_vld_preg;
reg    probe_in_ap_vld_in_sig;
reg   [63:0] data_in_0;
reg   [63:0] data_in_1;
reg   [63:0] data_in_2;
reg   [63:0] data_in_3;
reg   [63:0] data_in_4;
reg   [63:0] data_in_5;
reg   [63:0] data_in_6;
reg   [63:0] data_in_7;
reg   [63:0] data_in_8;
reg    probe_in_blk_n;
reg   [31:0] reg_177;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_174_p1;
reg   [63:0] reg_182;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_169_p2;
reg   [63:0] reg_188;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state33;
reg    ap_block_state1;
wire   [3:0] i_1_fu_199_p2;
reg   [3:0] i_1_reg_322;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_193_p2;
wire   [63:0] grp_fu_163_p2;
wire    ap_CS_fsm_state20;
reg   [63:0] acc_reg_116;
wire   [3:0] ap_phi_mux_i_phi_fu_132_p4;
reg   [3:0] i_reg_128;
reg   [63:0] ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
reg   [63:0] data_in_load_phi_reg_139;
wire   [63:0] tmp_3_fu_250_p1;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state34;
reg   [63:0] grp_fu_169_p0;
reg   [63:0] grp_fu_169_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state22;
reg   [37:0] ap_NS_fsm;
reg    ap_condition_457;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 probe_in_preg = 64'd0;
#0 probe_in_ap_vld_preg = 1'b0;
#0 data_in_0 = 64'd0;
#0 data_in_1 = 64'd0;
#0 data_in_2 = 64'd0;
#0 data_in_3 = 64'd0;
#0 data_in_4 = 64'd0;
#0 data_in_5 = 64'd0;
#0 data_in_6 = 64'd0;
#0 data_in_7 = 64'd0;
#0 data_in_8 = 64'd0;
end

fir_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_reg_116),
    .din1(reg_188),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

fir_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_169_p0),
    .din1(grp_fu_169_p1),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

fir_sitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fir_sitodp_32ns_64_6_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_177),
    .ce(1'b1),
    .dout(grp_fu_174_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        probe_in_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            probe_in_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (probe_in_ap_vld == 1'b1))) begin
            probe_in_ap_vld_preg <= probe_in_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        probe_in_preg <= 64'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (probe_in_ap_vld == 1'b1))) begin
            probe_in_preg <= probe_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        acc_reg_116 <= grp_fu_163_p2;
    end else if ((~((probe_in_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        acc_reg_116 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd0))) begin
        if ((1'b1 == ap_condition_457)) begin
            data_in_load_phi_reg_139 <= data_in_8;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd8)) begin
            data_in_load_phi_reg_139 <= data_in_7;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd7)) begin
            data_in_load_phi_reg_139 <= data_in_6;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd6)) begin
            data_in_load_phi_reg_139 <= data_in_5;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd5)) begin
            data_in_load_phi_reg_139 <= data_in_4;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd4)) begin
            data_in_load_phi_reg_139 <= data_in_3;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd3)) begin
            data_in_load_phi_reg_139 <= data_in_2;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd2)) begin
            data_in_load_phi_reg_139 <= data_in_1;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd1)) begin
            data_in_load_phi_reg_139 <= data_in_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_reg_128 <= i_1_reg_322;
    end else if ((~((probe_in_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_128 <= 4'd9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd1))) begin
        data_in_0 <= probe_in_in_sig;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd1) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_1 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd2) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_2 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd3) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_3 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd4) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_4 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd5) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_5 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd6) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_6 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd7) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_7 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_i_phi_fu_132_p4 == 4'd8) & (tmp_fu_193_p2 == 1'd0))) begin
        data_in_8 <= ap_phi_mux_data_in_load_phi_phi_fu_142_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd0))) begin
        i_1_reg_322 <= i_1_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_177 <= coeff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_182 <= grp_fu_174_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_188 <= grp_fu_169_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd0))) begin
        if ((1'b1 == ap_condition_457)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_8;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd8)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_7;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd7)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_6;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd6)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_5;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd5)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_4;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd4)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_3;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd3)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_2;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd2)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_1;
        end else if ((ap_phi_mux_i_phi_fu_132_p4 == 4'd1)) begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = data_in_0;
        end else begin
            ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_data_in_load_phi_phi_fu_142_p18 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((tmp_fu_193_p2 == 1'd1)) begin
            coeff_address0 = 64'd0;
        end else if ((tmp_fu_193_p2 == 1'd0)) begin
            coeff_address0 = tmp_3_fu_250_p1;
        end else begin
            coeff_address0 = 'bx;
        end
    end else begin
        coeff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd0)))) begin
        coeff_ce0 = 1'b1;
    end else begin
        coeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_169_p0 = reg_182;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_169_p0 = data_in_load_phi_reg_139;
    end else begin
        grp_fu_169_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_169_p1 = probe_in_in_sig;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_169_p1 = reg_182;
    end else begin
        grp_fu_169_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((probe_in_ap_vld == 1'b1)) begin
        probe_in_ap_vld_in_sig = probe_in_ap_vld;
    end else begin
        probe_in_ap_vld_in_sig = probe_in_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        probe_in_blk_n = probe_in_ap_vld;
    end else begin
        probe_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((probe_in_ap_vld == 1'b1)) begin
        probe_in_in_sig = probe_in;
    end else begin
        probe_in_in_sig = probe_in_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((probe_in_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_193_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((probe_in_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_condition_457 = (~(ap_phi_mux_i_phi_fu_132_p4 == 4'd8) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd7) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd6) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd5) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd4) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd3) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd2) & ~(ap_phi_mux_i_phi_fu_132_p4 == 4'd1));
end

assign ap_phi_mux_i_phi_fu_132_p4 = i_reg_128;

assign i_1_fu_199_p2 = ($signed(i_reg_128) + $signed(4'd15));

assign out_r = grp_fu_163_p2;

assign tmp_3_fu_250_p1 = i_reg_128;

assign tmp_fu_193_p2 = ((i_reg_128 == 4'd0) ? 1'b1 : 1'b0);

endmodule //fir
