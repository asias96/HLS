// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.293400,HLS_SYN_LAT=63,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=2199,HLS_SYN_LUT=2867,HLS_VERSION=2018_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        probe_in,
        probe_in_ap_vld,
        out_r,
        out_r_ap_vld,
        coeff_address0,
        coeff_ce0,
        coeff_q0
);

parameter    ap_ST_fsm_state1 = 64'd1;
parameter    ap_ST_fsm_state2 = 64'd2;
parameter    ap_ST_fsm_state3 = 64'd4;
parameter    ap_ST_fsm_state4 = 64'd8;
parameter    ap_ST_fsm_state5 = 64'd16;
parameter    ap_ST_fsm_state6 = 64'd32;
parameter    ap_ST_fsm_state7 = 64'd64;
parameter    ap_ST_fsm_state8 = 64'd128;
parameter    ap_ST_fsm_state9 = 64'd256;
parameter    ap_ST_fsm_state10 = 64'd512;
parameter    ap_ST_fsm_state11 = 64'd1024;
parameter    ap_ST_fsm_state12 = 64'd2048;
parameter    ap_ST_fsm_state13 = 64'd4096;
parameter    ap_ST_fsm_state14 = 64'd8192;
parameter    ap_ST_fsm_state15 = 64'd16384;
parameter    ap_ST_fsm_state16 = 64'd32768;
parameter    ap_ST_fsm_state17 = 64'd65536;
parameter    ap_ST_fsm_state18 = 64'd131072;
parameter    ap_ST_fsm_state19 = 64'd262144;
parameter    ap_ST_fsm_state20 = 64'd524288;
parameter    ap_ST_fsm_state21 = 64'd1048576;
parameter    ap_ST_fsm_state22 = 64'd2097152;
parameter    ap_ST_fsm_state23 = 64'd4194304;
parameter    ap_ST_fsm_state24 = 64'd8388608;
parameter    ap_ST_fsm_state25 = 64'd16777216;
parameter    ap_ST_fsm_state26 = 64'd33554432;
parameter    ap_ST_fsm_state27 = 64'd67108864;
parameter    ap_ST_fsm_state28 = 64'd134217728;
parameter    ap_ST_fsm_state29 = 64'd268435456;
parameter    ap_ST_fsm_state30 = 64'd536870912;
parameter    ap_ST_fsm_state31 = 64'd1073741824;
parameter    ap_ST_fsm_state32 = 64'd2147483648;
parameter    ap_ST_fsm_state33 = 64'd4294967296;
parameter    ap_ST_fsm_state34 = 64'd8589934592;
parameter    ap_ST_fsm_state35 = 64'd17179869184;
parameter    ap_ST_fsm_state36 = 64'd34359738368;
parameter    ap_ST_fsm_state37 = 64'd68719476736;
parameter    ap_ST_fsm_state38 = 64'd137438953472;
parameter    ap_ST_fsm_state39 = 64'd274877906944;
parameter    ap_ST_fsm_state40 = 64'd549755813888;
parameter    ap_ST_fsm_state41 = 64'd1099511627776;
parameter    ap_ST_fsm_state42 = 64'd2199023255552;
parameter    ap_ST_fsm_state43 = 64'd4398046511104;
parameter    ap_ST_fsm_state44 = 64'd8796093022208;
parameter    ap_ST_fsm_state45 = 64'd17592186044416;
parameter    ap_ST_fsm_state46 = 64'd35184372088832;
parameter    ap_ST_fsm_state47 = 64'd70368744177664;
parameter    ap_ST_fsm_state48 = 64'd140737488355328;
parameter    ap_ST_fsm_state49 = 64'd281474976710656;
parameter    ap_ST_fsm_state50 = 64'd562949953421312;
parameter    ap_ST_fsm_state51 = 64'd1125899906842624;
parameter    ap_ST_fsm_state52 = 64'd2251799813685248;
parameter    ap_ST_fsm_state53 = 64'd4503599627370496;
parameter    ap_ST_fsm_state54 = 64'd9007199254740992;
parameter    ap_ST_fsm_state55 = 64'd18014398509481984;
parameter    ap_ST_fsm_state56 = 64'd36028797018963968;
parameter    ap_ST_fsm_state57 = 64'd72057594037927936;
parameter    ap_ST_fsm_state58 = 64'd144115188075855872;
parameter    ap_ST_fsm_state59 = 64'd288230376151711744;
parameter    ap_ST_fsm_state60 = 64'd576460752303423488;
parameter    ap_ST_fsm_state61 = 64'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 64'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 64'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 64'd9223372036854775808;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] probe_in;
input   probe_in_ap_vld;
output  [63:0] out_r;
output   out_r_ap_vld;
output  [3:0] coeff_address0;
output   coeff_ce0;
input  [31:0] coeff_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;
reg[3:0] coeff_address0;
reg coeff_ce0;

(* fsm_encoding = "none" *) reg   [63:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] probe_in_preg;
reg   [63:0] probe_in_in_sig;
reg    probe_in_ap_vld_preg;
reg    probe_in_ap_vld_in_sig;
reg   [63:0] data_in_8;
reg   [63:0] data_in_7;
reg   [63:0] data_in_6;
reg   [63:0] data_in_5;
reg   [63:0] data_in_4;
reg   [63:0] data_in_3;
reg   [63:0] data_in_2;
reg   [63:0] data_in_1;
reg   [63:0] data_in_0;
reg    probe_in_blk_n;
wire    ap_CS_fsm_state54;
reg   [31:0] reg_192;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state42;
reg   [31:0] reg_197;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state47;
wire   [63:0] grp_fu_189_p1;
reg   [63:0] reg_202;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state48;
reg   [63:0] reg_207;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state53;
wire   [63:0] grp_fu_184_p2;
reg   [63:0] reg_213;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state59;
wire   [63:0] grp_fu_178_p2;
reg   [63:0] reg_219;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state64;
reg   [63:0] grp_fu_178_p0;
reg   [63:0] grp_fu_178_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
reg   [63:0] grp_fu_184_p0;
reg   [63:0] grp_fu_184_p1;
reg   [31:0] grp_fu_189_p0;
wire    ap_CS_fsm_state3;
reg    grp_fu_178_ce;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
reg    grp_fu_184_ce;
reg   [63:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 64'd1;
#0 probe_in_preg = 64'd0;
#0 probe_in_ap_vld_preg = 1'b0;
#0 data_in_8 = 64'd0;
#0 data_in_7 = 64'd0;
#0 data_in_6 = 64'd0;
#0 data_in_5 = 64'd0;
#0 data_in_4 = 64'd0;
#0 data_in_3 = 64'd0;
#0 data_in_2 = 64'd0;
#0 data_in_1 = 64'd0;
#0 data_in_0 = 64'd0;
end

fir_dadd_64ns_64nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dadd_64ns_64nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_178_p0),
    .din1(grp_fu_178_p1),
    .ce(grp_fu_178_ce),
    .dout(grp_fu_178_p2)
);

fir_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fir_dmul_64ns_64ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_184_p0),
    .din1(grp_fu_184_p1),
    .ce(grp_fu_184_ce),
    .dout(grp_fu_184_p2)
);

fir_sitodp_32ns_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fir_sitodp_32ns_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .ce(1'b1),
    .dout(grp_fu_189_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        probe_in_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state64)) begin
            probe_in_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (probe_in_ap_vld == 1'b1))) begin
            probe_in_ap_vld_preg <= probe_in_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        probe_in_preg <= 64'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (probe_in_ap_vld == 1'b1))) begin
            probe_in_preg <= probe_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((probe_in_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        data_in_0 <= probe_in_in_sig;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        data_in_1 <= data_in_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        data_in_2 <= data_in_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        data_in_3 <= data_in_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        data_in_4 <= data_in_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        data_in_5 <= data_in_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        data_in_6 <= data_in_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        data_in_7 <= data_in_6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_8 <= data_in_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_192 <= coeff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_197 <= coeff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_202 <= grp_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_207 <= grp_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | ((probe_in_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state54)))) begin
        reg_213 <= grp_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | ((probe_in_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state54)))) begin
        reg_219 <= grp_fu_178_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        coeff_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        coeff_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        coeff_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        coeff_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        coeff_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        coeff_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        coeff_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        coeff_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        coeff_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeff_address0 = 64'd9;
    end else begin
        coeff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        coeff_ce0 = 1'b1;
    end else begin
        coeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2) | ((probe_in_ap_vld_in_sig == 1'b0) & (1'b1 == ap_CS_fsm_state54)))) begin
        grp_fu_178_ce = 1'b0;
    end else begin
        grp_fu_178_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_178_p0 = reg_219;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_178_p0 = reg_213;
    end else begin
        grp_fu_178_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_178_p1 = reg_213;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_178_p1 = 64'd0;
    end else begin
        grp_fu_178_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | ((probe_in_ap_vld_in_sig == 1'b0) & (1'b1 == ap_CS_fsm_state54)))) begin
        grp_fu_184_ce = 1'b0;
    end else begin
        grp_fu_184_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_184_p0 = reg_207;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_184_p0 = data_in_0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_184_p0 = data_in_1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_184_p0 = data_in_2;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_184_p0 = data_in_3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_184_p0 = data_in_4;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_184_p0 = data_in_5;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_184_p0 = data_in_6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_184_p0 = data_in_7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_184_p0 = data_in_8;
    end else begin
        grp_fu_184_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_184_p1 = probe_in_in_sig;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_184_p1 = reg_207;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_184_p1 = reg_202;
    end else begin
        grp_fu_184_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_189_p0 = reg_197;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_189_p0 = reg_192;
    end else begin
        grp_fu_189_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((probe_in_ap_vld == 1'b1)) begin
        probe_in_ap_vld_in_sig = probe_in_ap_vld;
    end else begin
        probe_in_ap_vld_in_sig = probe_in_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        probe_in_blk_n = probe_in_ap_vld;
    end else begin
        probe_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((probe_in_ap_vld == 1'b1)) begin
        probe_in_in_sig = probe_in;
    end else begin
        probe_in_in_sig = probe_in_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((probe_in_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign out_r = grp_fu_178_p2;

endmodule //fir
