/*
 * Empty C++ Application
 */

#include <stdio.h>
#include <xparameters.h>
#include "xfir.h"
#include "xaxidma.h"

#define SIZE 600

XFir Fir_handle;
XFir_Config* Fir_conf;
XAxiDma Dma_handle;
XAxiDma_Config* Dma_conf;

typedef int data_type;

void init_pheriferial()
{
	printf("Start initialization");

	Fir_conf = XFir_LookupConfig(XPAR_FIR_0_DEVICE_ID);
	if (Fir_conf != NULL) {
		int init = XFir_CfgInitialize(&Fir_handle, Fir_conf);
		if (init){
			Dma_conf = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
			if (Dma_conf != NULL){
				init = XAxiDma_CfgInitialize(&Dma_handle, Dma_conf);
				if (init){
					XAxiDma_IntrDisable(&Dma_handle, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
					XAxiDma_IntrDisable(&Dma_handle, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
				}
				else
					printf("Initialization failed. XAxiDma_CfgInitialize() returns ~0");
			}
			else
				printf("Initialization failed. XAxiDma_LookupConfig() returns NULL");
		}
		else
			printf("Initialization failed. XFir_CfgInitialize() returns ~0");
	}
	else
		printf("Initialization failed. XFir_LookupConfig() return NULL");

	printf("End of initialization");
}

int main()
{
	data_type Dma_buffer_in[SIZE];
	data_type Dma_buffer_out[SIZE];

	init_pheriferial();

	// Input buffer
	for (int i = 0; i < SIZE/2; i++) {
		Dma_buffer_in[i] = 0;
	}
	for (int i = SIZE/2; i < SIZE; i++) {
		Dma_buffer_in[i] = 1;
	}

	//Coefficients
	XFir_Set_coeff_0_V(&Fir_handle, 1);
	XFir_Set_coeff_1_V(&Fir_handle, 1);
	XFir_Set_coeff_2_V(&Fir_handle, 1);
	XFir_Set_coeff_3_V(&Fir_handle, 1);
	XFir_Set_coeff_4_V(&Fir_handle, 1);
	XFir_Set_coeff_5_V(&Fir_handle, 1);
	XFir_Set_coeff_6_V(&Fir_handle, 1);
	XFir_Set_coeff_7_V(&Fir_handle, 1);
	XFir_Set_coeff_8_V(&Fir_handle, 1);
	XFir_Set_coeff_9_V(&Fir_handle, 1);

	//Module FIR autostart
	XFir_EnableAutoRestart(&Fir_handle);

	//Start module FIR
	XFir_Start(&Fir_handle);

	while(1){
		int decision;
		printf("WykonaÄ‡ ponownie (1) czy przerwac przetwarzanie(0)?");
		scanf("%d", &decision);
		if (decision)

	}

	return 0;
}
