-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    stream_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.806000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=439,HLS_SYN_LUT=749,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_keep_V_0_sel : STD_LOGIC;
    signal stream_in_V_keep_V_0_load_A : STD_LOGIC;
    signal stream_in_V_keep_V_0_load_B : STD_LOGIC;
    signal stream_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_strb_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_strb_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_strb_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_strb_V_0_sel : STD_LOGIC;
    signal stream_in_V_strb_V_0_load_A : STD_LOGIC;
    signal stream_in_V_strb_V_0_load_B : STD_LOGIC;
    signal stream_in_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel : STD_LOGIC;
    signal stream_in_V_user_V_0_load_A : STD_LOGIC;
    signal stream_in_V_user_V_0_load_B : STD_LOGIC;
    signal stream_in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel : STD_LOGIC;
    signal stream_in_V_last_V_0_load_A : STD_LOGIC;
    signal stream_in_V_last_V_0_load_B : STD_LOGIC;
    signal stream_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_id_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_id_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_id_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_id_V_0_sel : STD_LOGIC;
    signal stream_in_V_id_V_0_load_A : STD_LOGIC;
    signal stream_in_V_id_V_0_load_B : STD_LOGIC;
    signal stream_in_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_dest_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_dest_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_dest_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_dest_V_0_sel : STD_LOGIC;
    signal stream_in_V_dest_V_0_load_A : STD_LOGIC;
    signal stream_in_V_dest_V_0_load_B : STD_LOGIC;
    signal stream_in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_A : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_B : STD_LOGIC;
    signal stream_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_A : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_B : STD_LOGIC;
    signal stream_out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_id_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel : STD_LOGIC;
    signal stream_out_V_id_V_1_load_A : STD_LOGIC;
    signal stream_out_V_id_V_1_load_B : STD_LOGIC;
    signal stream_out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_A : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_B : STD_LOGIC;
    signal stream_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal data_in_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_V_ce0 : STD_LOGIC;
    signal data_in_V_we0 : STD_LOGIC;
    signal data_in_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal coeff_ce0 : STD_LOGIC;
    signal coeff_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_data_V_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_keep_V_reg_258 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_263 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_268 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_V_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_283 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_291 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal i_1_fu_215_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_296 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_V_2_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_V_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_s_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component fir_data_in_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_coeff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    data_in_V_U : component fir_data_in_V
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_in_V_address0,
        ce0 => data_in_V_ce0,
        we0 => data_in_V_we0,
        d0 => data_in_V_d0,
        q0 => data_in_V_q0);

    coeff_U : component fir_coeff
    generic map (
        DataWidth => 1,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => coeff_address0,
        ce0 => coeff_ce0,
        q0 => coeff_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_rd <= not(stream_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_in = ap_const_logic_1) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_wr <= not(stream_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_data_V_0_state = ap_const_lv2_2) and (stream_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and (stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_data_V_0_state = ap_const_lv2_1) and (stream_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and (stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((stream_in_V_data_V_0_state = ap_const_lv2_1) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_data_V_0_state = ap_const_lv2_2) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_dest_V_0_sel_rd <= not(stream_in_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_dest_V_0_ack_in = ap_const_logic_1) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_dest_V_0_sel_wr <= not(stream_in_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_dest_V_0_state = ap_const_lv2_3)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_id_V_0_sel_rd <= not(stream_in_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_id_V_0_ack_in = ap_const_logic_1) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_id_V_0_sel_wr <= not(stream_in_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_id_V_0_state = ap_const_lv2_2) and (stream_in_V_id_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_id_V_0_state = ap_const_lv2_3) and (stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_id_V_0_state = ap_const_lv2_1) and (stream_in_V_id_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_id_V_0_state = ap_const_lv2_3) and (stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_id_V_0_state = ap_const_lv2_3)) or ((stream_in_V_id_V_0_state = ap_const_lv2_1) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_id_V_0_state = ap_const_lv2_2) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_keep_V_0_vld_out = ap_const_logic_1) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1))) then 
                                        stream_in_V_keep_V_0_sel_rd <= not(stream_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_keep_V_0_ack_in = ap_const_logic_1) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_keep_V_0_sel_wr <= not(stream_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_keep_V_0_state = ap_const_lv2_3)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_last_V_0_ack_out = ap_const_logic_1) and (stream_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_last_V_0_sel_rd <= not(stream_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_last_V_0_ack_in = ap_const_logic_1) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_last_V_0_sel_wr <= not(stream_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_last_V_0_state = ap_const_lv2_2) and (stream_in_V_last_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_last_V_0_state = ap_const_lv2_3) and (stream_in_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_last_V_0_state = ap_const_lv2_1) and (stream_in_V_last_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_last_V_0_state = ap_const_lv2_3) and (stream_in_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_last_V_0_state = ap_const_lv2_3)) or ((stream_in_V_last_V_0_state = ap_const_lv2_1) and (stream_in_V_last_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_last_V_0_state = ap_const_lv2_2) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_strb_V_0_sel_rd <= not(stream_in_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_strb_V_0_ack_in = ap_const_logic_1) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_strb_V_0_sel_wr <= not(stream_in_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_strb_V_0_state = ap_const_lv2_3)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_user_V_0_sel_rd <= not(stream_in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_user_V_0_ack_in = ap_const_logic_1) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_user_V_0_sel_wr <= not(stream_in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_user_V_0_state = ap_const_lv2_2) and (stream_in_V_user_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_user_V_0_state = ap_const_lv2_3) and (stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_user_V_0_state = ap_const_lv2_1) and (stream_in_V_user_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_user_V_0_state = ap_const_lv2_3) and (stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_user_V_0_state = ap_const_lv2_3)) or ((stream_in_V_user_V_0_state = ap_const_lv2_1) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_user_V_0_state = ap_const_lv2_2) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_out = ap_const_logic_1) and (stream_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_in = ap_const_logic_1) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_data_V_1_state = ap_const_lv2_2) and (stream_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and (stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_data_V_1_state = ap_const_lv2_1) and (stream_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and (stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((stream_out_V_data_V_1_state = ap_const_lv2_1) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_data_V_1_state = ap_const_lv2_2) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_out = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_rd <= not(stream_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_in = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_wr <= not(stream_out_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_dest_V_1_state = ap_const_lv2_2) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_3) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_dest_V_1_state = ap_const_lv2_1) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_3) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_dest_V_1_state = ap_const_lv2_3)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_1) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_2) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_out = ap_const_logic_1) and (stream_out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_rd <= not(stream_out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_in = ap_const_logic_1) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_wr <= not(stream_out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_id_V_1_state = ap_const_lv2_2) and (stream_out_V_id_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_id_V_1_state = ap_const_lv2_3) and (stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_id_V_1_state = ap_const_lv2_1) and (stream_out_V_id_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_id_V_1_state = ap_const_lv2_3) and (stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_id_V_1_state = ap_const_lv2_3)) or ((stream_out_V_id_V_1_state = ap_const_lv2_1) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_id_V_1_state = ap_const_lv2_2) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_out = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_rd <= not(stream_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_in = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_wr <= not(stream_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_keep_V_1_state = ap_const_lv2_2) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_3) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_keep_V_1_state = ap_const_lv2_1) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_3) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_keep_V_1_state = ap_const_lv2_3)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_1) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_2) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_out = ap_const_logic_1) and (stream_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_in = ap_const_logic_1) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_last_V_1_state = ap_const_lv2_2) and (stream_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_last_V_1_state = ap_const_lv2_3) and (stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_last_V_1_state = ap_const_lv2_1) and (stream_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_last_V_1_state = ap_const_lv2_3) and (stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_last_V_1_state = ap_const_lv2_3)) or ((stream_out_V_last_V_1_state = ap_const_lv2_1) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_last_V_1_state = ap_const_lv2_2) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_out = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_rd <= not(stream_out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_in = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_wr <= not(stream_out_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_strb_V_1_state = ap_const_lv2_2) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_3) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_strb_V_1_state = ap_const_lv2_1) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_3) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_strb_V_1_state = ap_const_lv2_3)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_1) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_2) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_out = ap_const_logic_1) and (stream_out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_in = ap_const_logic_1) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_user_V_1_state = ap_const_lv2_2) and (stream_out_V_user_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_user_V_1_state = ap_const_lv2_3) and (stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_user_V_1_state = ap_const_lv2_1) and (stream_out_V_user_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_user_V_1_state = ap_const_lv2_3) and (stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_user_V_1_state = ap_const_lv2_3)) or ((stream_out_V_user_V_1_state = ap_const_lv2_1) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_user_V_1_state = ap_const_lv2_2) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_165 <= i_1_reg_296;
            elsif ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_165 <= ap_const_lv4_9;
            end if; 
        end if;
    end process;

    p_s_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_s_reg_153 <= acc_V_fu_246_p2;
            elsif ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_s_reg_153 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_296 <= i_1_fu_215_p2;
                    tmp_3_reg_291(3 downto 0) <= tmp_3_fu_210_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_dest_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_dest_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_id_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_id_V_0_payload_A <= stream_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_id_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_id_V_0_payload_B <= stream_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_last_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_last_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_strb_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_strb_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_A <= acc_V_2_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_B <= acc_V_2_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_A <= tmp_dest_V_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_B <= tmp_dest_V_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_A <= tmp_id_V_reg_278;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_B <= tmp_id_V_reg_278;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_A <= tmp_keep_V_reg_258;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_B <= tmp_keep_V_reg_258;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_A <= tmp_last_V_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_B <= tmp_last_V_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_A <= tmp_strb_V_reg_263;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_B <= tmp_strb_V_reg_263;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_A <= tmp_user_V_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_B <= tmp_user_V_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_data_V_reg_252 <= stream_in_V_data_V_0_data_out;
                tmp_dest_V_reg_283 <= stream_in_V_dest_V_0_data_out;
                tmp_id_V_reg_278 <= stream_in_V_id_V_0_data_out;
                tmp_keep_V_reg_258 <= stream_in_V_keep_V_0_data_out;
                tmp_last_V_reg_273 <= stream_in_V_last_V_0_data_out;
                tmp_strb_V_reg_263 <= stream_in_V_strb_V_0_data_out;
                tmp_user_V_reg_268 <= stream_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    tmp_3_reg_291(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, stream_out_V_data_V_1_state, stream_out_V_keep_V_1_ack_in, stream_out_V_keep_V_1_state, stream_out_V_strb_V_1_ack_in, stream_out_V_strb_V_1_state, stream_out_V_user_V_1_ack_in, stream_out_V_user_V_1_state, stream_out_V_last_V_1_ack_in, stream_out_V_last_V_1_state, stream_out_V_id_V_1_ack_in, stream_out_V_id_V_1_state, stream_out_V_dest_V_1_ack_in, stream_out_V_dest_V_1_state, ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_CS_fsm_state4, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (stream_out_V_dest_V_1_state(0) = ap_const_logic_0) and (stream_out_V_id_V_1_state(0) = ap_const_logic_0) and (stream_out_V_last_V_1_state(0) = ap_const_logic_0) and (stream_out_V_user_V_1_state(0) = ap_const_logic_0) and (stream_out_V_strb_V_1_state(0) = ap_const_logic_0) and (stream_out_V_keep_V_1_state(0) = ap_const_logic_0) and (stream_out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_V_2_fu_226_p2 <= std_logic_vector(unsigned(tmp_data_V_reg_252) + unsigned(p_s_reg_153));
    acc_V_fu_246_p2 <= std_logic_vector(unsigned(p_s_reg_153) + unsigned(p_1_fu_240_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, stream_in_V_data_V_0_vld_out)
    begin
                ap_block_state1 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(stream_out_V_data_V_1_ack_in, tmp_2_fu_204_p2)
    begin
                ap_block_state2_io <= ((tmp_2_fu_204_p2 = ap_const_lv1_1) and (stream_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in)
    begin
                ap_block_state4 <= ((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_data_V_1_state, stream_out_V_keep_V_1_ack_in, stream_out_V_keep_V_1_state, stream_out_V_strb_V_1_ack_in, stream_out_V_strb_V_1_state, stream_out_V_user_V_1_ack_in, stream_out_V_user_V_1_state, stream_out_V_last_V_1_ack_in, stream_out_V_last_V_1_state, stream_out_V_id_V_1_ack_in, stream_out_V_id_V_1_state, stream_out_V_dest_V_1_ack_in, stream_out_V_dest_V_1_state, ap_CS_fsm_state4)
    begin
        if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (stream_out_V_dest_V_1_state(0) = ap_const_logic_0) and (stream_out_V_id_V_1_state(0) = ap_const_logic_0) and (stream_out_V_last_V_1_state(0) = ap_const_logic_0) and (stream_out_V_user_V_1_state(0) = ap_const_logic_0) and (stream_out_V_strb_V_1_state(0) = ap_const_logic_0) and (stream_out_V_keep_V_1_state(0) = ap_const_logic_0) and (stream_out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_data_V_1_state, stream_out_V_keep_V_1_ack_in, stream_out_V_keep_V_1_state, stream_out_V_strb_V_1_ack_in, stream_out_V_strb_V_1_state, stream_out_V_user_V_1_ack_in, stream_out_V_user_V_1_state, stream_out_V_last_V_1_ack_in, stream_out_V_last_V_1_state, stream_out_V_id_V_1_ack_in, stream_out_V_id_V_1_state, stream_out_V_dest_V_1_ack_in, stream_out_V_dest_V_1_state, ap_CS_fsm_state4)
    begin
        if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (stream_out_V_dest_V_1_state(0) = ap_const_logic_0) and (stream_out_V_id_V_1_state(0) = ap_const_logic_0) and (stream_out_V_last_V_1_state(0) = ap_const_logic_0) and (stream_out_V_user_V_1_state(0) = ap_const_logic_0) and (stream_out_V_strb_V_1_state(0) = ap_const_logic_0) and (stream_out_V_keep_V_1_state(0) = ap_const_logic_0) and (stream_out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    coeff_address0 <= tmp_3_fu_210_p1(4 - 1 downto 0);

    coeff_ce0_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            coeff_ce0 <= ap_const_logic_1;
        else 
            coeff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_address0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, tmp_3_reg_291, ap_CS_fsm_state3, tmp_5_fu_221_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_in_V_address0 <= tmp_3_reg_291(4 - 1 downto 0);
        elsif (((tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_address0 <= ap_const_lv4_0;
        elsif (((tmp_2_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_address0 <= tmp_5_fu_221_p1(4 - 1 downto 0);
        else 
            data_in_V_address0 <= "XXXX";
        end if; 
    end process;


    data_in_V_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_in_V_ce0 <= ap_const_logic_1;
        else 
            data_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_d0_assign_proc : process(data_in_V_q0, ap_CS_fsm_state2, tmp_2_fu_204_p2, tmp_data_V_reg_252, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_in_V_d0 <= data_in_V_q0;
        elsif (((tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_V_d0 <= tmp_data_V_reg_252;
        else 
            data_in_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_in_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_in_V_we0 <= ap_const_logic_1;
        else 
            data_in_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_215_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(i_reg_165));
    p_1_fu_240_p2 <= (tmp_fu_232_p3 and data_in_V_q0);

    stream_in_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            stream_in_TDATA_blk_n <= stream_in_V_data_V_0_state(0);
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= stream_in_V_dest_V_0_state(1);
    stream_in_V_data_V_0_ack_in <= stream_in_V_data_V_0_state(1);

    stream_in_V_data_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_data_V_0_data_out_assign_proc : process(stream_in_V_data_V_0_payload_A, stream_in_V_data_V_0_payload_B, stream_in_V_data_V_0_sel)
    begin
        if ((stream_in_V_data_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_B;
        else 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_data_V_0_load_A <= (stream_in_V_data_V_0_state_cmp_full and not(stream_in_V_data_V_0_sel_wr));
    stream_in_V_data_V_0_load_B <= (stream_in_V_data_V_0_state_cmp_full and stream_in_V_data_V_0_sel_wr);
    stream_in_V_data_V_0_sel <= stream_in_V_data_V_0_sel_rd;
    stream_in_V_data_V_0_state_cmp_full <= '0' when (stream_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_data_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_data_V_0_vld_out <= stream_in_V_data_V_0_state(0);
    stream_in_V_dest_V_0_ack_in <= stream_in_V_dest_V_0_state(1);

    stream_in_V_dest_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_dest_V_0_data_out_assign_proc : process(stream_in_V_dest_V_0_payload_A, stream_in_V_dest_V_0_payload_B, stream_in_V_dest_V_0_sel)
    begin
        if ((stream_in_V_dest_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_dest_V_0_data_out <= stream_in_V_dest_V_0_payload_B;
        else 
            stream_in_V_dest_V_0_data_out <= stream_in_V_dest_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_dest_V_0_load_A <= (stream_in_V_dest_V_0_state_cmp_full and not(stream_in_V_dest_V_0_sel_wr));
    stream_in_V_dest_V_0_load_B <= (stream_in_V_dest_V_0_state_cmp_full and stream_in_V_dest_V_0_sel_wr);
    stream_in_V_dest_V_0_sel <= stream_in_V_dest_V_0_sel_rd;
    stream_in_V_dest_V_0_state_cmp_full <= '0' when (stream_in_V_dest_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_dest_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_dest_V_0_vld_out <= stream_in_V_dest_V_0_state(0);
    stream_in_V_id_V_0_ack_in <= stream_in_V_id_V_0_state(1);

    stream_in_V_id_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_id_V_0_data_out_assign_proc : process(stream_in_V_id_V_0_payload_A, stream_in_V_id_V_0_payload_B, stream_in_V_id_V_0_sel)
    begin
        if ((stream_in_V_id_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_id_V_0_data_out <= stream_in_V_id_V_0_payload_B;
        else 
            stream_in_V_id_V_0_data_out <= stream_in_V_id_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_id_V_0_load_A <= (stream_in_V_id_V_0_state_cmp_full and not(stream_in_V_id_V_0_sel_wr));
    stream_in_V_id_V_0_load_B <= (stream_in_V_id_V_0_state_cmp_full and stream_in_V_id_V_0_sel_wr);
    stream_in_V_id_V_0_sel <= stream_in_V_id_V_0_sel_rd;
    stream_in_V_id_V_0_state_cmp_full <= '0' when (stream_in_V_id_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_id_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_id_V_0_vld_out <= stream_in_V_id_V_0_state(0);
    stream_in_V_keep_V_0_ack_in <= stream_in_V_keep_V_0_state(1);

    stream_in_V_keep_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_keep_V_0_data_out_assign_proc : process(stream_in_V_keep_V_0_payload_A, stream_in_V_keep_V_0_payload_B, stream_in_V_keep_V_0_sel)
    begin
        if ((stream_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_keep_V_0_data_out <= stream_in_V_keep_V_0_payload_B;
        else 
            stream_in_V_keep_V_0_data_out <= stream_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_keep_V_0_load_A <= (stream_in_V_keep_V_0_state_cmp_full and not(stream_in_V_keep_V_0_sel_wr));
    stream_in_V_keep_V_0_load_B <= (stream_in_V_keep_V_0_state_cmp_full and stream_in_V_keep_V_0_sel_wr);
    stream_in_V_keep_V_0_sel <= stream_in_V_keep_V_0_sel_rd;
    stream_in_V_keep_V_0_state_cmp_full <= '0' when (stream_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_keep_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_keep_V_0_vld_out <= stream_in_V_keep_V_0_state(0);
    stream_in_V_last_V_0_ack_in <= stream_in_V_last_V_0_state(1);

    stream_in_V_last_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_last_V_0_data_out_assign_proc : process(stream_in_V_last_V_0_payload_A, stream_in_V_last_V_0_payload_B, stream_in_V_last_V_0_sel)
    begin
        if ((stream_in_V_last_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_B;
        else 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_last_V_0_load_A <= (stream_in_V_last_V_0_state_cmp_full and not(stream_in_V_last_V_0_sel_wr));
    stream_in_V_last_V_0_load_B <= (stream_in_V_last_V_0_state_cmp_full and stream_in_V_last_V_0_sel_wr);
    stream_in_V_last_V_0_sel <= stream_in_V_last_V_0_sel_rd;
    stream_in_V_last_V_0_state_cmp_full <= '0' when (stream_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_last_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_last_V_0_vld_out <= stream_in_V_last_V_0_state(0);
    stream_in_V_strb_V_0_ack_in <= stream_in_V_strb_V_0_state(1);

    stream_in_V_strb_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_strb_V_0_data_out_assign_proc : process(stream_in_V_strb_V_0_payload_A, stream_in_V_strb_V_0_payload_B, stream_in_V_strb_V_0_sel)
    begin
        if ((stream_in_V_strb_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_strb_V_0_data_out <= stream_in_V_strb_V_0_payload_B;
        else 
            stream_in_V_strb_V_0_data_out <= stream_in_V_strb_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_strb_V_0_load_A <= (stream_in_V_strb_V_0_state_cmp_full and not(stream_in_V_strb_V_0_sel_wr));
    stream_in_V_strb_V_0_load_B <= (stream_in_V_strb_V_0_state_cmp_full and stream_in_V_strb_V_0_sel_wr);
    stream_in_V_strb_V_0_sel <= stream_in_V_strb_V_0_sel_rd;
    stream_in_V_strb_V_0_state_cmp_full <= '0' when (stream_in_V_strb_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_strb_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_strb_V_0_vld_out <= stream_in_V_strb_V_0_state(0);
    stream_in_V_user_V_0_ack_in <= stream_in_V_user_V_0_state(1);

    stream_in_V_user_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out)
    begin
        if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_user_V_0_data_out_assign_proc : process(stream_in_V_user_V_0_payload_A, stream_in_V_user_V_0_payload_B, stream_in_V_user_V_0_sel)
    begin
        if ((stream_in_V_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_B;
        else 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_user_V_0_load_A <= (stream_in_V_user_V_0_state_cmp_full and not(stream_in_V_user_V_0_sel_wr));
    stream_in_V_user_V_0_load_B <= (stream_in_V_user_V_0_state_cmp_full and stream_in_V_user_V_0_sel_wr);
    stream_in_V_user_V_0_sel <= stream_in_V_user_V_0_sel_rd;
    stream_in_V_user_V_0_state_cmp_full <= '0' when (stream_in_V_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_user_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_user_V_0_vld_out <= stream_in_V_user_V_0_state(0);
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_V_data_V_1_state, ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TDEST <= stream_out_V_dest_V_1_data_out;
    stream_out_TID <= stream_out_V_id_V_1_data_out;
    stream_out_TKEEP <= stream_out_V_keep_V_1_data_out;
    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TSTRB <= stream_out_V_strb_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_dest_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((stream_out_V_data_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_state_cmp_full and stream_out_V_data_V_1_sel_wr);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_dest_V_1_ack_in <= stream_out_V_dest_V_1_state(1);
    stream_out_V_dest_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_dest_V_1_data_out_assign_proc : process(stream_out_V_dest_V_1_payload_A, stream_out_V_dest_V_1_payload_B, stream_out_V_dest_V_1_sel)
    begin
        if ((stream_out_V_dest_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_B;
        else 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_dest_V_1_load_A <= (stream_out_V_dest_V_1_state_cmp_full and not(stream_out_V_dest_V_1_sel_wr));
    stream_out_V_dest_V_1_load_B <= (stream_out_V_dest_V_1_state_cmp_full and stream_out_V_dest_V_1_sel_wr);
    stream_out_V_dest_V_1_sel <= stream_out_V_dest_V_1_sel_rd;
    stream_out_V_dest_V_1_state_cmp_full <= '0' when (stream_out_V_dest_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_dest_V_1_vld_out <= stream_out_V_dest_V_1_state(0);
    stream_out_V_id_V_1_ack_in <= stream_out_V_id_V_1_state(1);
    stream_out_V_id_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_id_V_1_data_out_assign_proc : process(stream_out_V_id_V_1_payload_A, stream_out_V_id_V_1_payload_B, stream_out_V_id_V_1_sel)
    begin
        if ((stream_out_V_id_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_B;
        else 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_id_V_1_load_A <= (stream_out_V_id_V_1_state_cmp_full and not(stream_out_V_id_V_1_sel_wr));
    stream_out_V_id_V_1_load_B <= (stream_out_V_id_V_1_state_cmp_full and stream_out_V_id_V_1_sel_wr);
    stream_out_V_id_V_1_sel <= stream_out_V_id_V_1_sel_rd;
    stream_out_V_id_V_1_state_cmp_full <= '0' when (stream_out_V_id_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_id_V_1_vld_out <= stream_out_V_id_V_1_state(0);
    stream_out_V_keep_V_1_ack_in <= stream_out_V_keep_V_1_state(1);
    stream_out_V_keep_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_keep_V_1_data_out_assign_proc : process(stream_out_V_keep_V_1_payload_A, stream_out_V_keep_V_1_payload_B, stream_out_V_keep_V_1_sel)
    begin
        if ((stream_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_B;
        else 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_keep_V_1_load_A <= (stream_out_V_keep_V_1_state_cmp_full and not(stream_out_V_keep_V_1_sel_wr));
    stream_out_V_keep_V_1_load_B <= (stream_out_V_keep_V_1_state_cmp_full and stream_out_V_keep_V_1_sel_wr);
    stream_out_V_keep_V_1_sel <= stream_out_V_keep_V_1_sel_rd;
    stream_out_V_keep_V_1_state_cmp_full <= '0' when (stream_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_keep_V_1_vld_out <= stream_out_V_keep_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((stream_out_V_last_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_state_cmp_full and stream_out_V_last_V_1_sel_wr);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_strb_V_1_ack_in <= stream_out_V_strb_V_1_state(1);
    stream_out_V_strb_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_strb_V_1_data_out_assign_proc : process(stream_out_V_strb_V_1_payload_A, stream_out_V_strb_V_1_payload_B, stream_out_V_strb_V_1_sel)
    begin
        if ((stream_out_V_strb_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_B;
        else 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_strb_V_1_load_A <= (stream_out_V_strb_V_1_state_cmp_full and not(stream_out_V_strb_V_1_sel_wr));
    stream_out_V_strb_V_1_load_B <= (stream_out_V_strb_V_1_state_cmp_full and stream_out_V_strb_V_1_sel_wr);
    stream_out_V_strb_V_1_sel <= stream_out_V_strb_V_1_sel_rd;
    stream_out_V_strb_V_1_state_cmp_full <= '0' when (stream_out_V_strb_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_strb_V_1_vld_out <= stream_out_V_strb_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((stream_out_V_user_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_state_cmp_full and stream_out_V_user_V_1_sel_wr);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_204_p2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_2_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    tmp_2_fu_204_p2 <= "1" when (i_reg_165 = ap_const_lv4_0) else "0";
    tmp_3_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_165),64));
    tmp_5_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_215_p2),64));
    tmp_fu_232_p3 <= 
        ap_const_lv32_FFFFFFFF when (coeff_q0(0) = '1') else 
        ap_const_lv32_0;
end behav;
